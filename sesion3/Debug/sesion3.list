
sesion3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fb8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002140  08002140  00012140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800219c  0800219c  0001219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080021a4  080021a4  000121a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080021a8  080021a8  000121a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  080021ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000a0  20000010  080021bc  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000b0  080021bc  000200b0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ae9c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001be5  00000000  00000000  0002aedc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003f37  00000000  00000000  0002cac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000007c0  00000000  00000000  000309f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000830  00000000  00000000  000311b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004040  00000000  00000000  000319e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002f78  00000000  00000000  00035a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000389a0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001304  00000000  00000000  00038a1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002128 	.word	0x08002128

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002128 	.word	0x08002128

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <HAL_InitTick+0x40>)
{
 80004dc:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 80004de:	6818      	ldr	r0, [r3, #0]
 80004e0:	b908      	cbnz	r0, 80004e6 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80004e2:	2001      	movs	r0, #1
 80004e4:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80004e6:	4a0d      	ldr	r2, [pc, #52]	; (800051c <HAL_InitTick+0x44>)
 80004e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ec:	fbb3 f3f0 	udiv	r3, r3, r0
 80004f0:	6810      	ldr	r0, [r2, #0]
 80004f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f6:	f000 f8a5 	bl	8000644 <HAL_SYSTICK_Config>
 80004fa:	4604      	mov	r4, r0
 80004fc:	2800      	cmp	r0, #0
 80004fe:	d1f0      	bne.n	80004e2 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000500:	2d0f      	cmp	r5, #15
 8000502:	d8ee      	bhi.n	80004e2 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000504:	4602      	mov	r2, r0
 8000506:	4629      	mov	r1, r5
 8000508:	f04f 30ff 	mov.w	r0, #4294967295
 800050c:	f000 f858 	bl	80005c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <HAL_InitTick+0x48>)
 8000512:	4620      	mov	r0, r4
 8000514:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000516:	bd38      	pop	{r3, r4, r5, pc}
 8000518:	20000000 	.word	0x20000000
 800051c:	2000000c 	.word	0x2000000c
 8000520:	20000004 	.word	0x20000004

08000524 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	4a09      	ldr	r2, [pc, #36]	; (800054c <HAL_Init+0x28>)
 8000526:	6813      	ldr	r3, [r2, #0]
 8000528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 800052c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000532:	f000 f833 	bl	800059c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000536:	2000      	movs	r0, #0
 8000538:	f7ff ffce 	bl	80004d8 <HAL_InitTick>
 800053c:	4604      	mov	r4, r0
 800053e:	b918      	cbnz	r0, 8000548 <HAL_Init+0x24>
    HAL_MspInit();
 8000540:	f001 fd02 	bl	8001f48 <HAL_MspInit>
}
 8000544:	4620      	mov	r0, r4
 8000546:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000548:	2401      	movs	r4, #1
 800054a:	e7fb      	b.n	8000544 <HAL_Init+0x20>
 800054c:	40022000 	.word	0x40022000

08000550 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000550:	4a03      	ldr	r2, [pc, #12]	; (8000560 <HAL_IncTick+0x10>)
 8000552:	4904      	ldr	r1, [pc, #16]	; (8000564 <HAL_IncTick+0x14>)
 8000554:	6813      	ldr	r3, [r2, #0]
 8000556:	6809      	ldr	r1, [r1, #0]
 8000558:	440b      	add	r3, r1
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	2000002c 	.word	0x2000002c
 8000564:	20000000 	.word	0x20000000

08000568 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000568:	4b01      	ldr	r3, [pc, #4]	; (8000570 <HAL_GetTick+0x8>)
 800056a:	6818      	ldr	r0, [r3, #0]
}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	2000002c 	.word	0x2000002c

08000574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000574:	b538      	push	{r3, r4, r5, lr}
 8000576:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000578:	f7ff fff6 	bl	8000568 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800057c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	bf1c      	itt	ne
 8000580:	4b05      	ldrne	r3, [pc, #20]	; (8000598 <HAL_Delay+0x24>)
 8000582:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000584:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000586:	bf18      	it	ne
 8000588:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058a:	f7ff ffed 	bl	8000568 <HAL_GetTick>
 800058e:	1b40      	subs	r0, r0, r5
 8000590:	4284      	cmp	r4, r0
 8000592:	d8fa      	bhi.n	800058a <HAL_Delay+0x16>
  {
  }
}
 8000594:	bd38      	pop	{r3, r4, r5, pc}
 8000596:	bf00      	nop
 8000598:	20000000 	.word	0x20000000

0800059c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800059c:	4a07      	ldr	r2, [pc, #28]	; (80005bc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800059e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005a4:	041b      	lsls	r3, r3, #16
 80005a6:	0c1b      	lsrs	r3, r3, #16
 80005a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005ac:	0200      	lsls	r0, r0, #8
 80005ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005b6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005b8:	60d3      	str	r3, [r2, #12]
 80005ba:	4770      	bx	lr
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c0:	4b17      	ldr	r3, [pc, #92]	; (8000620 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	68dc      	ldr	r4, [r3, #12]
 80005c6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ca:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ce:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	bf28      	it	cs
 80005d4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d8:	f04f 0501 	mov.w	r5, #1
 80005dc:	fa05 f303 	lsl.w	r3, r5, r3
 80005e0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e4:	bf8c      	ite	hi
 80005e6:	3c03      	subhi	r4, #3
 80005e8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ea:	4019      	ands	r1, r3
 80005ec:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ee:	fa05 f404 	lsl.w	r4, r5, r4
 80005f2:	3c01      	subs	r4, #1
 80005f4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005f6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f8:	ea42 0201 	orr.w	r2, r2, r1
 80005fc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	bfad      	iteet	ge
 8000602:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000606:	f000 000f 	andlt.w	r0, r0, #15
 800060a:	4b06      	ldrlt	r3, [pc, #24]	; (8000624 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	bfb5      	itete	lt
 8000612:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00
 8000624:	e000ed14 	.word	0xe000ed14

08000628 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000628:	2800      	cmp	r0, #0
 800062a:	db08      	blt.n	800063e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800062c:	0942      	lsrs	r2, r0, #5
 800062e:	2301      	movs	r3, #1
 8000630:	f000 001f 	and.w	r0, r0, #31
 8000634:	fa03 f000 	lsl.w	r0, r3, r0
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <HAL_NVIC_EnableIRQ+0x18>)
 800063a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800063e:	4770      	bx	lr
 8000640:	e000e100 	.word	0xe000e100

08000644 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000644:	3801      	subs	r0, #1
 8000646:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800064a:	d20a      	bcs.n	8000662 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	4a07      	ldr	r2, [pc, #28]	; (800066c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000650:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	21f0      	movs	r1, #240	; 0xf0
 8000654:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000658:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000662:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000e010 	.word	0xe000e010
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000674:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000676:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000678:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000824 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800067c:	4c67      	ldr	r4, [pc, #412]	; (800081c <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800067e:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8000680:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000682:	9a01      	ldr	r2, [sp, #4]
 8000684:	40da      	lsrs	r2, r3
 8000686:	d102      	bne.n	800068e <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000688:	b005      	add	sp, #20
 800068a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800068e:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8000690:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000692:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8000694:	ea12 0e06 	ands.w	lr, r2, r6
 8000698:	f000 80b1 	beq.w	80007fe <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800069c:	684a      	ldr	r2, [r1, #4]
 800069e:	f022 0710 	bic.w	r7, r2, #16
 80006a2:	2f02      	cmp	r7, #2
 80006a4:	d116      	bne.n	80006d4 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 80006a6:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80006aa:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006ae:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80006b2:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006b6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80006ba:	f04f 0c0f 	mov.w	ip, #15
 80006be:	fa0c fc0a 	lsl.w	ip, ip, sl
 80006c2:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80006c6:	690d      	ldr	r5, [r1, #16]
 80006c8:	fa05 f50a 	lsl.w	r5, r5, sl
 80006cc:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80006d0:	f8c9 5020 	str.w	r5, [r9, #32]
 80006d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006d8:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006da:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006de:	fa05 f50c 	lsl.w	r5, r5, ip
 80006e2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006e4:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006e8:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006ec:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006f2:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f6:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006f8:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006fc:	d811      	bhi.n	8000722 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80006fe:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000700:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000704:	68cf      	ldr	r7, [r1, #12]
 8000706:	fa07 f70c 	lsl.w	r7, r7, ip
 800070a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 800070e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000710:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000712:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000716:	f3c2 1700 	ubfx	r7, r2, #4, #1
 800071a:	409f      	lsls	r7, r3
 800071c:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000720:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000722:	f1ba 0f03 	cmp.w	sl, #3
 8000726:	d107      	bne.n	8000738 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8000728:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800072a:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800072e:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8000732:	409f      	lsls	r7, r3
 8000734:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8000736:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000738:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800073a:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800073c:	688e      	ldr	r6, [r1, #8]
 800073e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000742:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8000744:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000746:	00d5      	lsls	r5, r2, #3
 8000748:	d559      	bpl.n	80007fe <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800074e:	f045 0501 	orr.w	r5, r5, #1
 8000752:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8000756:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800075a:	f023 0603 	bic.w	r6, r3, #3
 800075e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000762:	f005 0501 	and.w	r5, r5, #1
 8000766:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800076a:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800076c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000770:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000772:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000774:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000778:	270f      	movs	r7, #15
 800077a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800077e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000782:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000786:	d03c      	beq.n	8000802 <HAL_GPIO_Init+0x192>
 8000788:	4d25      	ldr	r5, [pc, #148]	; (8000820 <HAL_GPIO_Init+0x1b0>)
 800078a:	42a8      	cmp	r0, r5
 800078c:	d03b      	beq.n	8000806 <HAL_GPIO_Init+0x196>
 800078e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000792:	42a8      	cmp	r0, r5
 8000794:	d039      	beq.n	800080a <HAL_GPIO_Init+0x19a>
 8000796:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800079a:	42a8      	cmp	r0, r5
 800079c:	d037      	beq.n	800080e <HAL_GPIO_Init+0x19e>
 800079e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a2:	42a8      	cmp	r0, r5
 80007a4:	d035      	beq.n	8000812 <HAL_GPIO_Init+0x1a2>
 80007a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007aa:	42a8      	cmp	r0, r5
 80007ac:	d033      	beq.n	8000816 <HAL_GPIO_Init+0x1a6>
 80007ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b2:	42a8      	cmp	r0, r5
 80007b4:	bf14      	ite	ne
 80007b6:	2507      	movne	r5, #7
 80007b8:	2506      	moveq	r5, #6
 80007ba:	fa05 f50c 	lsl.w	r5, r5, ip
 80007be:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80007c0:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 80007c2:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80007c4:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007c8:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 80007ca:	bf54      	ite	pl
 80007cc:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007ce:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 80007d2:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 80007d4:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007d6:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 80007d8:	bf54      	ite	pl
 80007da:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007dc:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 80007e0:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 80007e2:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007e4:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 80007e6:	bf54      	ite	pl
 80007e8:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007ea:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80007ee:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80007f0:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007f2:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 80007f4:	bf54      	ite	pl
 80007f6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007f8:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80007fc:	60e5      	str	r5, [r4, #12]
    position++;
 80007fe:	3301      	adds	r3, #1
 8000800:	e73f      	b.n	8000682 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000802:	2500      	movs	r5, #0
 8000804:	e7d9      	b.n	80007ba <HAL_GPIO_Init+0x14a>
 8000806:	2501      	movs	r5, #1
 8000808:	e7d7      	b.n	80007ba <HAL_GPIO_Init+0x14a>
 800080a:	2502      	movs	r5, #2
 800080c:	e7d5      	b.n	80007ba <HAL_GPIO_Init+0x14a>
 800080e:	2503      	movs	r5, #3
 8000810:	e7d3      	b.n	80007ba <HAL_GPIO_Init+0x14a>
 8000812:	2504      	movs	r5, #4
 8000814:	e7d1      	b.n	80007ba <HAL_GPIO_Init+0x14a>
 8000816:	2505      	movs	r5, #5
 8000818:	e7cf      	b.n	80007ba <HAL_GPIO_Init+0x14a>
 800081a:	bf00      	nop
 800081c:	40010400 	.word	0x40010400
 8000820:	48000400 	.word	0x48000400
 8000824:	40021000 	.word	0x40021000

08000828 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000828:	b10a      	cbz	r2, 800082e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800082a:	6181      	str	r1, [r0, #24]
 800082c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800082e:	6281      	str	r1, [r0, #40]	; 0x28
 8000830:	4770      	bx	lr
	...

08000834 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000834:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000838:	6959      	ldr	r1, [r3, #20]
 800083a:	4201      	tst	r1, r0
 800083c:	d002      	beq.n	8000844 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800083e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000840:	f001 fb7c 	bl	8001f3c <HAL_GPIO_EXTI_Callback>
 8000844:	bd08      	pop	{r3, pc}
 8000846:	bf00      	nop
 8000848:	40010400 	.word	0x40010400

0800084c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800084c:	4b02      	ldr	r3, [pc, #8]	; (8000858 <HAL_PWREx_GetVoltageRange+0xc>)
 800084e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000850:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40007000 	.word	0x40007000

0800085c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800085e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000860:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000864:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000868:	d11c      	bne.n	80008a4 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800086a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800086e:	d015      	beq.n	800089c <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800087a:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800087c:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <HAL_PWREx_ControlVoltageScaling+0x64>)
 800087e:	6811      	ldr	r1, [r2, #0]
 8000880:	2232      	movs	r2, #50	; 0x32
 8000882:	434a      	muls	r2, r1
 8000884:	490f      	ldr	r1, [pc, #60]	; (80008c4 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8000886:	fbb2 f2f1 	udiv	r2, r2, r1
 800088a:	4619      	mov	r1, r3
 800088c:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800088e:	6958      	ldr	r0, [r3, #20]
 8000890:	0540      	lsls	r0, r0, #21
 8000892:	d500      	bpl.n	8000896 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000894:	b922      	cbnz	r2, 80008a0 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000896:	694b      	ldr	r3, [r1, #20]
 8000898:	055b      	lsls	r3, r3, #21
 800089a:	d40d      	bmi.n	80008b8 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800089c:	2000      	movs	r0, #0
 800089e:	4770      	bx	lr
        wait_loop_index--;
 80008a0:	3a01      	subs	r2, #1
 80008a2:	e7f4      	b.n	800088e <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80008a4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80008a8:	bf1f      	itttt	ne
 80008aa:	681a      	ldrne	r2, [r3, #0]
 80008ac:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80008b0:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80008b4:	601a      	strne	r2, [r3, #0]
 80008b6:	e7f1      	b.n	800089c <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 80008b8:	2003      	movs	r0, #3
}
 80008ba:	4770      	bx	lr
 80008bc:	40007000 	.word	0x40007000
 80008c0:	2000000c 	.word	0x2000000c
 80008c4:	000f4240 	.word	0x000f4240

080008c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80008c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80008ca:	4d1e      	ldr	r5, [pc, #120]	; (8000944 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80008cc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80008ce:	00da      	lsls	r2, r3, #3
{
 80008d0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80008d2:	d518      	bpl.n	8000906 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80008d4:	f7ff ffba 	bl	800084c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80008d8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80008dc:	d123      	bne.n	8000926 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80008de:	2c80      	cmp	r4, #128	; 0x80
 80008e0:	d929      	bls.n	8000936 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80008e2:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80008e4:	bf8c      	ite	hi
 80008e6:	2002      	movhi	r0, #2
 80008e8:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80008ea:	4a17      	ldr	r2, [pc, #92]	; (8000948 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80008ec:	6813      	ldr	r3, [r2, #0]
 80008ee:	f023 0307 	bic.w	r3, r3, #7
 80008f2:	4303      	orrs	r3, r0
 80008f4:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80008f6:	6813      	ldr	r3, [r2, #0]
 80008f8:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80008fc:	1a18      	subs	r0, r3, r0
 80008fe:	bf18      	it	ne
 8000900:	2001      	movne	r0, #1
 8000902:	b003      	add	sp, #12
 8000904:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	65ab      	str	r3, [r5, #88]	; 0x58
 800090e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000914:	9301      	str	r3, [sp, #4]
 8000916:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000918:	f7ff ff98 	bl	800084c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800091c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800091e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000922:	65ab      	str	r3, [r5, #88]	; 0x58
 8000924:	e7d8      	b.n	80008d8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000926:	2c80      	cmp	r4, #128	; 0x80
 8000928:	d807      	bhi.n	800093a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800092a:	d008      	beq.n	800093e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 800092c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000930:	4258      	negs	r0, r3
 8000932:	4158      	adcs	r0, r3
 8000934:	e7d9      	b.n	80008ea <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000936:	2000      	movs	r0, #0
 8000938:	e7d7      	b.n	80008ea <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800093a:	2003      	movs	r0, #3
 800093c:	e7d5      	b.n	80008ea <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800093e:	2002      	movs	r0, #2
 8000940:	e7d3      	b.n	80008ea <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000
 8000948:	40022000 	.word	0x40022000

0800094c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <HAL_RCC_GetSysClockFreq+0x8c>)
 800094e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000950:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000952:	f012 020c 	ands.w	r2, r2, #12
 8000956:	d005      	beq.n	8000964 <HAL_RCC_GetSysClockFreq+0x18>
 8000958:	2a0c      	cmp	r2, #12
 800095a:	d115      	bne.n	8000988 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800095c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000960:	2901      	cmp	r1, #1
 8000962:	d118      	bne.n	8000996 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000964:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000966:	481d      	ldr	r0, [pc, #116]	; (80009dc <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000968:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800096a:	bf55      	itete	pl
 800096c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000970:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000972:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000976:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800097a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800097e:	b34a      	cbz	r2, 80009d4 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000980:	2a0c      	cmp	r2, #12
 8000982:	d009      	beq.n	8000998 <HAL_RCC_GetSysClockFreq+0x4c>
 8000984:	2000      	movs	r0, #0
  return sysclockfreq;
 8000986:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000988:	2a04      	cmp	r2, #4
 800098a:	d022      	beq.n	80009d2 <HAL_RCC_GetSysClockFreq+0x86>
 800098c:	2a08      	cmp	r2, #8
 800098e:	4814      	ldr	r0, [pc, #80]	; (80009e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8000990:	bf18      	it	ne
 8000992:	2000      	movne	r0, #0
 8000994:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000996:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000998:	68da      	ldr	r2, [r3, #12]
 800099a:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 800099e:	2a02      	cmp	r2, #2
 80009a0:	d015      	beq.n	80009ce <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 80009a2:	490f      	ldr	r1, [pc, #60]	; (80009e0 <HAL_RCC_GetSysClockFreq+0x94>)
 80009a4:	2a03      	cmp	r2, #3
 80009a6:	bf08      	it	eq
 80009a8:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80009aa:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80009ac:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80009b4:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80009b8:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80009bc:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80009be:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80009c0:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80009c2:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80009c4:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 80009c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80009cc:	4770      	bx	lr
      pllvco = HSI_VALUE;
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80009d0:	e7eb      	b.n	80009aa <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 80009d2:	4804      	ldr	r0, [pc, #16]	; (80009e4 <HAL_RCC_GetSysClockFreq+0x98>)
}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000
 80009dc:	0800216c 	.word	0x0800216c
 80009e0:	007a1200 	.word	0x007a1200
 80009e4:	00f42400 	.word	0x00f42400

080009e8 <HAL_RCC_OscConfig>:
{
 80009e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80009ec:	4605      	mov	r5, r0
 80009ee:	b908      	cbnz	r0, 80009f4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80009f0:	2001      	movs	r0, #1
 80009f2:	e047      	b.n	8000a84 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009f4:	4ca6      	ldr	r4, [pc, #664]	; (8000c90 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80009f6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009f8:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009fa:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80009fc:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009fe:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a02:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a06:	d573      	bpl.n	8000af0 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000a08:	b11e      	cbz	r6, 8000a12 <HAL_RCC_OscConfig+0x2a>
 8000a0a:	2e0c      	cmp	r6, #12
 8000a0c:	d152      	bne.n	8000ab4 <HAL_RCC_OscConfig+0xcc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000a0e:	2f01      	cmp	r7, #1
 8000a10:	d150      	bne.n	8000ab4 <HAL_RCC_OscConfig+0xcc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000a12:	6823      	ldr	r3, [r4, #0]
 8000a14:	0798      	lsls	r0, r3, #30
 8000a16:	d502      	bpl.n	8000a1e <HAL_RCC_OscConfig+0x36>
 8000a18:	69ab      	ldr	r3, [r5, #24]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0e8      	beq.n	80009f0 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000a1e:	6823      	ldr	r3, [r4, #0]
 8000a20:	6a28      	ldr	r0, [r5, #32]
 8000a22:	0719      	lsls	r1, r3, #28
 8000a24:	bf56      	itet	pl
 8000a26:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000a2a:	6823      	ldrmi	r3, [r4, #0]
 8000a2c:	091b      	lsrpl	r3, r3, #4
 8000a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a32:	4283      	cmp	r3, r0
 8000a34:	d229      	bcs.n	8000a8a <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a36:	f7ff ff47 	bl	80008c8 <RCC_SetFlashLatencyFromMSIRange>
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	d1d8      	bne.n	80009f0 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a3e:	6823      	ldr	r3, [r4, #0]
 8000a40:	f043 0308 	orr.w	r3, r3, #8
 8000a44:	6023      	str	r3, [r4, #0]
 8000a46:	6823      	ldr	r3, [r4, #0]
 8000a48:	6a2a      	ldr	r2, [r5, #32]
 8000a4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a52:	6863      	ldr	r3, [r4, #4]
 8000a54:	69ea      	ldr	r2, [r5, #28]
 8000a56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a5e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000a60:	f7ff ff74 	bl	800094c <HAL_RCC_GetSysClockFreq>
 8000a64:	68a3      	ldr	r3, [r4, #8]
 8000a66:	4a8b      	ldr	r2, [pc, #556]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000a68:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a6c:	5cd3      	ldrb	r3, [r2, r3]
 8000a6e:	f003 031f 	and.w	r3, r3, #31
 8000a72:	40d8      	lsrs	r0, r3
 8000a74:	4b88      	ldr	r3, [pc, #544]	; (8000c98 <HAL_RCC_OscConfig+0x2b0>)
 8000a76:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8000a78:	4b88      	ldr	r3, [pc, #544]	; (8000c9c <HAL_RCC_OscConfig+0x2b4>)
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	f7ff fd2c 	bl	80004d8 <HAL_InitTick>
        if(status != HAL_OK)
 8000a80:	2800      	cmp	r0, #0
 8000a82:	d035      	beq.n	8000af0 <HAL_RCC_OscConfig+0x108>
}
 8000a84:	b003      	add	sp, #12
 8000a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a8a:	6823      	ldr	r3, [r4, #0]
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	6023      	str	r3, [r4, #0]
 8000a92:	6823      	ldr	r3, [r4, #0]
 8000a94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a98:	4303      	orrs	r3, r0
 8000a9a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a9c:	6863      	ldr	r3, [r4, #4]
 8000a9e:	69ea      	ldr	r2, [r5, #28]
 8000aa0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000aa4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000aa8:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000aaa:	f7ff ff0d 	bl	80008c8 <RCC_SetFlashLatencyFromMSIRange>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d0d6      	beq.n	8000a60 <HAL_RCC_OscConfig+0x78>
 8000ab2:	e79d      	b.n	80009f0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ab4:	69ab      	ldr	r3, [r5, #24]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d036      	beq.n	8000b28 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_MSI_ENABLE();
 8000aba:	6823      	ldr	r3, [r4, #0]
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ac2:	f7ff fd51 	bl	8000568 <HAL_GetTick>
 8000ac6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	079a      	lsls	r2, r3, #30
 8000acc:	d524      	bpl.n	8000b18 <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	6023      	str	r3, [r4, #0]
 8000ad6:	6823      	ldr	r3, [r4, #0]
 8000ad8:	6a2a      	ldr	r2, [r5, #32]
 8000ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ae2:	6863      	ldr	r3, [r4, #4]
 8000ae4:	69ea      	ldr	r2, [r5, #28]
 8000ae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000aea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000aee:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000af0:	682b      	ldr	r3, [r5, #0]
 8000af2:	07d8      	lsls	r0, r3, #31
 8000af4:	d429      	bmi.n	8000b4a <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000af6:	682b      	ldr	r3, [r5, #0]
 8000af8:	0799      	lsls	r1, r3, #30
 8000afa:	d467      	bmi.n	8000bcc <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000afc:	682b      	ldr	r3, [r5, #0]
 8000afe:	0718      	lsls	r0, r3, #28
 8000b00:	f100 809c 	bmi.w	8000c3c <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b04:	682b      	ldr	r3, [r5, #0]
 8000b06:	0759      	lsls	r1, r3, #29
 8000b08:	f100 80ca 	bmi.w	8000ca0 <HAL_RCC_OscConfig+0x2b8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000b0c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	f040 8133 	bne.w	8000d7a <HAL_RCC_OscConfig+0x392>
  return HAL_OK;
 8000b14:	2000      	movs	r0, #0
 8000b16:	e7b5      	b.n	8000a84 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b18:	f7ff fd26 	bl	8000568 <HAL_GetTick>
 8000b1c:	eba0 0008 	sub.w	r0, r0, r8
 8000b20:	2802      	cmp	r0, #2
 8000b22:	d9d1      	bls.n	8000ac8 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 8000b24:	2003      	movs	r0, #3
 8000b26:	e7ad      	b.n	8000a84 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8000b28:	6823      	ldr	r3, [r4, #0]
 8000b2a:	f023 0301 	bic.w	r3, r3, #1
 8000b2e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b30:	f7ff fd1a 	bl	8000568 <HAL_GetTick>
 8000b34:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b36:	6823      	ldr	r3, [r4, #0]
 8000b38:	079b      	lsls	r3, r3, #30
 8000b3a:	d5d9      	bpl.n	8000af0 <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b3c:	f7ff fd14 	bl	8000568 <HAL_GetTick>
 8000b40:	eba0 0008 	sub.w	r0, r0, r8
 8000b44:	2802      	cmp	r0, #2
 8000b46:	d9f6      	bls.n	8000b36 <HAL_RCC_OscConfig+0x14e>
 8000b48:	e7ec      	b.n	8000b24 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000b4a:	2e08      	cmp	r6, #8
 8000b4c:	d003      	beq.n	8000b56 <HAL_RCC_OscConfig+0x16e>
 8000b4e:	2e0c      	cmp	r6, #12
 8000b50:	d108      	bne.n	8000b64 <HAL_RCC_OscConfig+0x17c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000b52:	2f03      	cmp	r7, #3
 8000b54:	d106      	bne.n	8000b64 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b56:	6823      	ldr	r3, [r4, #0]
 8000b58:	039a      	lsls	r2, r3, #14
 8000b5a:	d5cc      	bpl.n	8000af6 <HAL_RCC_OscConfig+0x10e>
 8000b5c:	686b      	ldr	r3, [r5, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1c9      	bne.n	8000af6 <HAL_RCC_OscConfig+0x10e>
 8000b62:	e745      	b.n	80009f0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b64:	686b      	ldr	r3, [r5, #4]
 8000b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b6a:	d110      	bne.n	8000b8e <HAL_RCC_OscConfig+0x1a6>
 8000b6c:	6823      	ldr	r3, [r4, #0]
 8000b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b72:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b74:	f7ff fcf8 	bl	8000568 <HAL_GetTick>
 8000b78:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b7a:	6823      	ldr	r3, [r4, #0]
 8000b7c:	039b      	lsls	r3, r3, #14
 8000b7e:	d4ba      	bmi.n	8000af6 <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b80:	f7ff fcf2 	bl	8000568 <HAL_GetTick>
 8000b84:	eba0 0008 	sub.w	r0, r0, r8
 8000b88:	2864      	cmp	r0, #100	; 0x64
 8000b8a:	d9f6      	bls.n	8000b7a <HAL_RCC_OscConfig+0x192>
 8000b8c:	e7ca      	b.n	8000b24 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b92:	d104      	bne.n	8000b9e <HAL_RCC_OscConfig+0x1b6>
 8000b94:	6823      	ldr	r3, [r4, #0]
 8000b96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b9a:	6023      	str	r3, [r4, #0]
 8000b9c:	e7e6      	b.n	8000b6c <HAL_RCC_OscConfig+0x184>
 8000b9e:	6822      	ldr	r2, [r4, #0]
 8000ba0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ba4:	6022      	str	r2, [r4, #0]
 8000ba6:	6822      	ldr	r2, [r4, #0]
 8000ba8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000bac:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1e0      	bne.n	8000b74 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8000bb2:	f7ff fcd9 	bl	8000568 <HAL_GetTick>
 8000bb6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000bb8:	6823      	ldr	r3, [r4, #0]
 8000bba:	0398      	lsls	r0, r3, #14
 8000bbc:	d59b      	bpl.n	8000af6 <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bbe:	f7ff fcd3 	bl	8000568 <HAL_GetTick>
 8000bc2:	eba0 0008 	sub.w	r0, r0, r8
 8000bc6:	2864      	cmp	r0, #100	; 0x64
 8000bc8:	d9f6      	bls.n	8000bb8 <HAL_RCC_OscConfig+0x1d0>
 8000bca:	e7ab      	b.n	8000b24 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000bcc:	2e04      	cmp	r6, #4
 8000bce:	d003      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x1f0>
 8000bd0:	2e0c      	cmp	r6, #12
 8000bd2:	d110      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000bd4:	2f02      	cmp	r7, #2
 8000bd6:	d10e      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	0559      	lsls	r1, r3, #21
 8000bdc:	d503      	bpl.n	8000be6 <HAL_RCC_OscConfig+0x1fe>
 8000bde:	68eb      	ldr	r3, [r5, #12]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	f43f af05 	beq.w	80009f0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be6:	6863      	ldr	r3, [r4, #4]
 8000be8:	692a      	ldr	r2, [r5, #16]
 8000bea:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000bee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000bf2:	6063      	str	r3, [r4, #4]
 8000bf4:	e782      	b.n	8000afc <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bf6:	68eb      	ldr	r3, [r5, #12]
 8000bf8:	b17b      	cbz	r3, 8000c1a <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c00:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c02:	f7ff fcb1 	bl	8000568 <HAL_GetTick>
 8000c06:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c08:	6823      	ldr	r3, [r4, #0]
 8000c0a:	055a      	lsls	r2, r3, #21
 8000c0c:	d4eb      	bmi.n	8000be6 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c0e:	f7ff fcab 	bl	8000568 <HAL_GetTick>
 8000c12:	1bc0      	subs	r0, r0, r7
 8000c14:	2802      	cmp	r0, #2
 8000c16:	d9f7      	bls.n	8000c08 <HAL_RCC_OscConfig+0x220>
 8000c18:	e784      	b.n	8000b24 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_DISABLE();
 8000c1a:	6823      	ldr	r3, [r4, #0]
 8000c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c20:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c22:	f7ff fca1 	bl	8000568 <HAL_GetTick>
 8000c26:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c28:	6823      	ldr	r3, [r4, #0]
 8000c2a:	055b      	lsls	r3, r3, #21
 8000c2c:	f57f af66 	bpl.w	8000afc <HAL_RCC_OscConfig+0x114>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c30:	f7ff fc9a 	bl	8000568 <HAL_GetTick>
 8000c34:	1bc0      	subs	r0, r0, r7
 8000c36:	2802      	cmp	r0, #2
 8000c38:	d9f6      	bls.n	8000c28 <HAL_RCC_OscConfig+0x240>
 8000c3a:	e773      	b.n	8000b24 <HAL_RCC_OscConfig+0x13c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c3c:	696b      	ldr	r3, [r5, #20]
 8000c3e:	b19b      	cbz	r3, 8000c68 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8000c40:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000c4c:	f7ff fc8c 	bl	8000568 <HAL_GetTick>
 8000c50:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000c52:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c56:	079a      	lsls	r2, r3, #30
 8000c58:	f53f af54 	bmi.w	8000b04 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c5c:	f7ff fc84 	bl	8000568 <HAL_GetTick>
 8000c60:	1bc0      	subs	r0, r0, r7
 8000c62:	2802      	cmp	r0, #2
 8000c64:	d9f5      	bls.n	8000c52 <HAL_RCC_OscConfig+0x26a>
 8000c66:	e75d      	b.n	8000b24 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_LSI_DISABLE();
 8000c68:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c6c:	f023 0301 	bic.w	r3, r3, #1
 8000c70:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000c74:	f7ff fc78 	bl	8000568 <HAL_GetTick>
 8000c78:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000c7a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c7e:	079b      	lsls	r3, r3, #30
 8000c80:	f57f af40 	bpl.w	8000b04 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c84:	f7ff fc70 	bl	8000568 <HAL_GetTick>
 8000c88:	1bc0      	subs	r0, r0, r7
 8000c8a:	2802      	cmp	r0, #2
 8000c8c:	d9f5      	bls.n	8000c7a <HAL_RCC_OscConfig+0x292>
 8000c8e:	e749      	b.n	8000b24 <HAL_RCC_OscConfig+0x13c>
 8000c90:	40021000 	.word	0x40021000
 8000c94:	08002151 	.word	0x08002151
 8000c98:	2000000c 	.word	0x2000000c
 8000c9c:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000ca0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ca2:	00d8      	lsls	r0, r3, #3
 8000ca4:	d429      	bmi.n	8000cfa <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	65a3      	str	r3, [r4, #88]	; 0x58
 8000cae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	9301      	str	r3, [sp, #4]
 8000cb6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000cb8:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000cbc:	4f79      	ldr	r7, [pc, #484]	; (8000ea4 <HAL_RCC_OscConfig+0x4bc>)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	05d9      	lsls	r1, r3, #23
 8000cc2:	d51d      	bpl.n	8000d00 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cc4:	68ab      	ldr	r3, [r5, #8]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d12b      	bne.n	8000d22 <HAL_RCC_OscConfig+0x33a>
 8000cca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000cd6:	f7ff fc47 	bl	8000568 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cda:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000cde:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000ce0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000ce4:	079b      	lsls	r3, r3, #30
 8000ce6:	d542      	bpl.n	8000d6e <HAL_RCC_OscConfig+0x386>
    if(pwrclkchanged == SET)
 8000ce8:	f1b8 0f00 	cmp.w	r8, #0
 8000cec:	f43f af0e 	beq.w	8000b0c <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cf0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	65a3      	str	r3, [r4, #88]	; 0x58
 8000cf8:	e708      	b.n	8000b0c <HAL_RCC_OscConfig+0x124>
    FlagStatus       pwrclkchanged = RESET;
 8000cfa:	f04f 0800 	mov.w	r8, #0
 8000cfe:	e7dd      	b.n	8000cbc <HAL_RCC_OscConfig+0x2d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d06:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000d08:	f7ff fc2e 	bl	8000568 <HAL_GetTick>
 8000d0c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	05da      	lsls	r2, r3, #23
 8000d12:	d4d7      	bmi.n	8000cc4 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d14:	f7ff fc28 	bl	8000568 <HAL_GetTick>
 8000d18:	eba0 0009 	sub.w	r0, r0, r9
 8000d1c:	2802      	cmp	r0, #2
 8000d1e:	d9f6      	bls.n	8000d0e <HAL_RCC_OscConfig+0x326>
 8000d20:	e700      	b.n	8000b24 <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d22:	2b05      	cmp	r3, #5
 8000d24:	d106      	bne.n	8000d34 <HAL_RCC_OscConfig+0x34c>
 8000d26:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000d32:	e7ca      	b.n	8000cca <HAL_RCC_OscConfig+0x2e2>
 8000d34:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000d38:	f022 0201 	bic.w	r2, r2, #1
 8000d3c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000d40:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000d44:	f022 0204 	bic.w	r2, r2, #4
 8000d48:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1c2      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x2ee>
      tickstart = HAL_GetTick();
 8000d50:	f7ff fc0a 	bl	8000568 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d54:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d58:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000d5a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d5e:	0798      	lsls	r0, r3, #30
 8000d60:	d5c2      	bpl.n	8000ce8 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d62:	f7ff fc01 	bl	8000568 <HAL_GetTick>
 8000d66:	1bc0      	subs	r0, r0, r7
 8000d68:	4548      	cmp	r0, r9
 8000d6a:	d9f6      	bls.n	8000d5a <HAL_RCC_OscConfig+0x372>
 8000d6c:	e6da      	b.n	8000b24 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d6e:	f7ff fbfb 	bl	8000568 <HAL_GetTick>
 8000d72:	1bc0      	subs	r0, r0, r7
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d9b3      	bls.n	8000ce0 <HAL_RCC_OscConfig+0x2f8>
 8000d78:	e6d4      	b.n	8000b24 <HAL_RCC_OscConfig+0x13c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000d7a:	2e0c      	cmp	r6, #12
 8000d7c:	d05c      	beq.n	8000e38 <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_PLL_DISABLE();
 8000d7e:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000d80:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000d82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d86:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000d88:	d13b      	bne.n	8000e02 <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 8000d8a:	f7ff fbed 	bl	8000568 <HAL_GetTick>
 8000d8e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000d90:	6823      	ldr	r3, [r4, #0]
 8000d92:	0199      	lsls	r1, r3, #6
 8000d94:	d42f      	bmi.n	8000df6 <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d96:	68e2      	ldr	r2, [r4, #12]
 8000d98:	4b43      	ldr	r3, [pc, #268]	; (8000ea8 <HAL_RCC_OscConfig+0x4c0>)
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000da2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000da6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000da8:	3a01      	subs	r2, #1
 8000daa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000dae:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000db0:	0912      	lsrs	r2, r2, #4
 8000db2:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000db6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000db8:	0852      	lsrs	r2, r2, #1
 8000dba:	3a01      	subs	r2, #1
 8000dbc:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000dc0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000dc2:	0852      	lsrs	r2, r2, #1
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000dca:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000dcc:	6823      	ldr	r3, [r4, #0]
 8000dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dd2:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000dd4:	68e3      	ldr	r3, [r4, #12]
 8000dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dda:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000ddc:	f7ff fbc4 	bl	8000568 <HAL_GetTick>
 8000de0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000de2:	6823      	ldr	r3, [r4, #0]
 8000de4:	019a      	lsls	r2, r3, #6
 8000de6:	f53f ae95 	bmi.w	8000b14 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dea:	f7ff fbbd 	bl	8000568 <HAL_GetTick>
 8000dee:	1b40      	subs	r0, r0, r5
 8000df0:	2802      	cmp	r0, #2
 8000df2:	d9f6      	bls.n	8000de2 <HAL_RCC_OscConfig+0x3fa>
 8000df4:	e696      	b.n	8000b24 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000df6:	f7ff fbb7 	bl	8000568 <HAL_GetTick>
 8000dfa:	1b80      	subs	r0, r0, r6
 8000dfc:	2802      	cmp	r0, #2
 8000dfe:	d9c7      	bls.n	8000d90 <HAL_RCC_OscConfig+0x3a8>
 8000e00:	e690      	b.n	8000b24 <HAL_RCC_OscConfig+0x13c>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8000e02:	6823      	ldr	r3, [r4, #0]
 8000e04:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000e08:	bf02      	ittt	eq
 8000e0a:	68e3      	ldreq	r3, [r4, #12]
 8000e0c:	f023 0303 	biceq.w	r3, r3, #3
 8000e10:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000e12:	68e3      	ldr	r3, [r4, #12]
 8000e14:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1c:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000e1e:	f7ff fba3 	bl	8000568 <HAL_GetTick>
 8000e22:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	019b      	lsls	r3, r3, #6
 8000e28:	f57f ae74 	bpl.w	8000b14 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e2c:	f7ff fb9c 	bl	8000568 <HAL_GetTick>
 8000e30:	1b40      	subs	r0, r0, r5
 8000e32:	2802      	cmp	r0, #2
 8000e34:	d9f6      	bls.n	8000e24 <HAL_RCC_OscConfig+0x43c>
 8000e36:	e675      	b.n	8000b24 <HAL_RCC_OscConfig+0x13c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e38:	2801      	cmp	r0, #1
 8000e3a:	f43f ae23 	beq.w	8000a84 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8000e3e:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e40:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000e42:	f003 0103 	and.w	r1, r3, #3
 8000e46:	4291      	cmp	r1, r2
 8000e48:	f47f add2 	bne.w	80009f0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000e4c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000e4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000e52:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e54:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8000e58:	f47f adca 	bne.w	80009f0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000e5c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8000e5e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000e62:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8000e66:	f47f adc3 	bne.w	80009f0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000e6a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000e6c:	3a07      	subs	r2, #7
 8000e6e:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8000e72:	bf18      	it	ne
 8000e74:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000e76:	4291      	cmp	r1, r2
 8000e78:	f47f adba 	bne.w	80009f0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000e7c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000e7e:	0852      	lsrs	r2, r2, #1
 8000e80:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8000e84:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000e86:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8000e8a:	f47f adb1 	bne.w	80009f0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000e8e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000e90:	0852      	lsrs	r2, r2, #1
 8000e92:	3a01      	subs	r2, #1
 8000e94:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000e98:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8000e9c:	bf14      	ite	ne
 8000e9e:	2001      	movne	r0, #1
 8000ea0:	2000      	moveq	r0, #0
 8000ea2:	e5ef      	b.n	8000a84 <HAL_RCC_OscConfig+0x9c>
 8000ea4:	40007000 	.word	0x40007000
 8000ea8:	f99d808c 	.word	0xf99d808c

08000eac <HAL_RCC_ClockConfig>:
{
 8000eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eb0:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	b910      	cbnz	r0, 8000ebc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ebc:	4a41      	ldr	r2, [pc, #260]	; (8000fc4 <HAL_RCC_ClockConfig+0x118>)
 8000ebe:	6813      	ldr	r3, [r2, #0]
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d32a      	bcc.n	8000f1e <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ec8:	6823      	ldr	r3, [r4, #0]
 8000eca:	07d9      	lsls	r1, r3, #31
 8000ecc:	d432      	bmi.n	8000f34 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ece:	6821      	ldr	r1, [r4, #0]
 8000ed0:	078a      	lsls	r2, r1, #30
 8000ed2:	d45c      	bmi.n	8000f8e <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ed4:	4a3b      	ldr	r2, [pc, #236]	; (8000fc4 <HAL_RCC_ClockConfig+0x118>)
 8000ed6:	6813      	ldr	r3, [r2, #0]
 8000ed8:	f003 0307 	and.w	r3, r3, #7
 8000edc:	429e      	cmp	r6, r3
 8000ede:	d35e      	bcc.n	8000f9e <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ee0:	f011 0f04 	tst.w	r1, #4
 8000ee4:	4d38      	ldr	r5, [pc, #224]	; (8000fc8 <HAL_RCC_ClockConfig+0x11c>)
 8000ee6:	d165      	bne.n	8000fb4 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ee8:	070b      	lsls	r3, r1, #28
 8000eea:	d506      	bpl.n	8000efa <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000eec:	68ab      	ldr	r3, [r5, #8]
 8000eee:	6922      	ldr	r2, [r4, #16]
 8000ef0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ef4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ef8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000efa:	f7ff fd27 	bl	800094c <HAL_RCC_GetSysClockFreq>
 8000efe:	68ab      	ldr	r3, [r5, #8]
 8000f00:	4a32      	ldr	r2, [pc, #200]	; (8000fcc <HAL_RCC_ClockConfig+0x120>)
 8000f02:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8000f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f0a:	5cd3      	ldrb	r3, [r2, r3]
 8000f0c:	f003 031f 	and.w	r3, r3, #31
 8000f10:	40d8      	lsrs	r0, r3
 8000f12:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <HAL_RCC_ClockConfig+0x124>)
 8000f14:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8000f16:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <HAL_RCC_ClockConfig+0x128>)
 8000f18:	6818      	ldr	r0, [r3, #0]
 8000f1a:	f7ff badd 	b.w	80004d8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f1e:	6813      	ldr	r3, [r2, #0]
 8000f20:	f023 0307 	bic.w	r3, r3, #7
 8000f24:	430b      	orrs	r3, r1
 8000f26:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f28:	6813      	ldr	r3, [r2, #0]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d1c1      	bne.n	8000eb6 <HAL_RCC_ClockConfig+0xa>
 8000f32:	e7c9      	b.n	8000ec8 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f34:	6862      	ldr	r2, [r4, #4]
 8000f36:	4d24      	ldr	r5, [pc, #144]	; (8000fc8 <HAL_RCC_ClockConfig+0x11c>)
 8000f38:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f3a:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f3c:	d11b      	bne.n	8000f76 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f3e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f42:	d0b8      	beq.n	8000eb6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000f44:	68ab      	ldr	r3, [r5, #8]
 8000f46:	f023 0303 	bic.w	r3, r3, #3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8000f4e:	f7ff fb0b 	bl	8000568 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f52:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000f56:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f58:	68ab      	ldr	r3, [r5, #8]
 8000f5a:	6862      	ldr	r2, [r4, #4]
 8000f5c:	f003 030c 	and.w	r3, r3, #12
 8000f60:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f64:	d0b3      	beq.n	8000ece <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f66:	f7ff faff 	bl	8000568 <HAL_GetTick>
 8000f6a:	1bc0      	subs	r0, r0, r7
 8000f6c:	4540      	cmp	r0, r8
 8000f6e:	d9f3      	bls.n	8000f58 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8000f70:	2003      	movs	r0, #3
}
 8000f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f76:	2a02      	cmp	r2, #2
 8000f78:	d102      	bne.n	8000f80 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f7a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f7e:	e7e0      	b.n	8000f42 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000f80:	b912      	cbnz	r2, 8000f88 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f82:	f013 0f02 	tst.w	r3, #2
 8000f86:	e7dc      	b.n	8000f42 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f88:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000f8c:	e7d9      	b.n	8000f42 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_RCC_ClockConfig+0x11c>)
 8000f90:	68a0      	ldr	r0, [r4, #8]
 8000f92:	6893      	ldr	r3, [r2, #8]
 8000f94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f98:	4303      	orrs	r3, r0
 8000f9a:	6093      	str	r3, [r2, #8]
 8000f9c:	e79a      	b.n	8000ed4 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f9e:	6813      	ldr	r3, [r2, #0]
 8000fa0:	f023 0307 	bic.w	r3, r3, #7
 8000fa4:	4333      	orrs	r3, r6
 8000fa6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fa8:	6813      	ldr	r3, [r2, #0]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	429e      	cmp	r6, r3
 8000fb0:	d181      	bne.n	8000eb6 <HAL_RCC_ClockConfig+0xa>
 8000fb2:	e795      	b.n	8000ee0 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fb4:	68ab      	ldr	r3, [r5, #8]
 8000fb6:	68e2      	ldr	r2, [r4, #12]
 8000fb8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	60ab      	str	r3, [r5, #8]
 8000fc0:	e792      	b.n	8000ee8 <HAL_RCC_ClockConfig+0x3c>
 8000fc2:	bf00      	nop
 8000fc4:	40022000 	.word	0x40022000
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	08002151 	.word	0x08002151
 8000fd0:	2000000c 	.word	0x2000000c
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000fda:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000fe2:	5cd3      	ldrb	r3, [r2, r3]
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000fe6:	6810      	ldr	r0, [r2, #0]
 8000fe8:	f003 031f 	and.w	r3, r3, #31
}
 8000fec:	40d8      	lsrs	r0, r3
 8000fee:	4770      	bx	lr
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	08002161 	.word	0x08002161
 8000ff8:	2000000c 	.word	0x2000000c

08000ffc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000ffe:	4a06      	ldr	r2, [pc, #24]	; (8001018 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001006:	5cd3      	ldrb	r3, [r2, r3]
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_RCC_GetPCLK2Freq+0x20>)
 800100a:	6810      	ldr	r0, [r2, #0]
 800100c:	f003 031f 	and.w	r3, r3, #31
}
 8001010:	40d8      	lsrs	r0, r3
 8001012:	4770      	bx	lr
 8001014:	40021000 	.word	0x40021000
 8001018:	08002161 	.word	0x08002161
 800101c:	2000000c 	.word	0x2000000c

08001020 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001022:	4b45      	ldr	r3, [pc, #276]	; (8001138 <RCCEx_PLLSAI1_Config+0x118>)
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	f012 0f03 	tst.w	r2, #3
{
 800102a:	4605      	mov	r5, r0
 800102c:	460e      	mov	r6, r1
 800102e:	461c      	mov	r4, r3
 8001030:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001032:	d02a      	beq.n	800108a <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001034:	68da      	ldr	r2, [r3, #12]
 8001036:	f002 0203 	and.w	r2, r2, #3
 800103a:	4282      	cmp	r2, r0
 800103c:	d13c      	bne.n	80010b8 <RCCEx_PLLSAI1_Config+0x98>
       ||
 800103e:	2a00      	cmp	r2, #0
 8001040:	d03a      	beq.n	80010b8 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001042:	68db      	ldr	r3, [r3, #12]
       ||
 8001044:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001046:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800104a:	3301      	adds	r3, #1
       ||
 800104c:	4293      	cmp	r3, r2
 800104e:	d133      	bne.n	80010b8 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001056:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001058:	f7ff fa86 	bl	8000568 <HAL_GetTick>
 800105c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800105e:	6823      	ldr	r3, [r4, #0]
 8001060:	011a      	lsls	r2, r3, #4
 8001062:	d432      	bmi.n	80010ca <RCCEx_PLLSAI1_Config+0xaa>
 8001064:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001066:	2e00      	cmp	r6, #0
 8001068:	d036      	beq.n	80010d8 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800106a:	2e01      	cmp	r6, #1
 800106c:	d150      	bne.n	8001110 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800106e:	6922      	ldr	r2, [r4, #16]
 8001070:	6928      	ldr	r0, [r5, #16]
 8001072:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001076:	0840      	lsrs	r0, r0, #1
 8001078:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800107c:	3801      	subs	r0, #1
 800107e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001082:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001086:	6122      	str	r2, [r4, #16]
 8001088:	e032      	b.n	80010f0 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 800108a:	2802      	cmp	r0, #2
 800108c:	d010      	beq.n	80010b0 <RCCEx_PLLSAI1_Config+0x90>
 800108e:	2803      	cmp	r0, #3
 8001090:	d014      	beq.n	80010bc <RCCEx_PLLSAI1_Config+0x9c>
 8001092:	2801      	cmp	r0, #1
 8001094:	d110      	bne.n	80010b8 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	079f      	lsls	r7, r3, #30
 800109a:	d538      	bpl.n	800110e <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800109c:	68e3      	ldr	r3, [r4, #12]
 800109e:	686a      	ldr	r2, [r5, #4]
 80010a0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80010a4:	3a01      	subs	r2, #1
 80010a6:	4318      	orrs	r0, r3
 80010a8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80010ac:	60e0      	str	r0, [r4, #12]
 80010ae:	e7cf      	b.n	8001050 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80010b6:	d1f1      	bne.n	800109c <RCCEx_PLLSAI1_Config+0x7c>
 80010b8:	2001      	movs	r0, #1
 80010ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	0391      	lsls	r1, r2, #14
 80010c0:	d4ec      	bmi.n	800109c <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80010c8:	e7f5      	b.n	80010b6 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80010ca:	f7ff fa4d 	bl	8000568 <HAL_GetTick>
 80010ce:	1bc0      	subs	r0, r0, r7
 80010d0:	2802      	cmp	r0, #2
 80010d2:	d9c4      	bls.n	800105e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80010d4:	2003      	movs	r0, #3
 80010d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80010d8:	6921      	ldr	r1, [r4, #16]
 80010da:	68eb      	ldr	r3, [r5, #12]
 80010dc:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 80010e0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80010e4:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80010e8:	091b      	lsrs	r3, r3, #4
 80010ea:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 80010ee:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010f6:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010f8:	f7ff fa36 	bl	8000568 <HAL_GetTick>
 80010fc:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	d513      	bpl.n	800112c <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001104:	6923      	ldr	r3, [r4, #16]
 8001106:	69aa      	ldr	r2, [r5, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	6123      	str	r3, [r4, #16]
 800110c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800110e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001110:	6923      	ldr	r3, [r4, #16]
 8001112:	6968      	ldr	r0, [r5, #20]
 8001114:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001118:	0840      	lsrs	r0, r0, #1
 800111a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800111e:	3801      	subs	r0, #1
 8001120:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001124:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001128:	6123      	str	r3, [r4, #16]
 800112a:	e7e1      	b.n	80010f0 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800112c:	f7ff fa1c 	bl	8000568 <HAL_GetTick>
 8001130:	1b80      	subs	r0, r0, r6
 8001132:	2802      	cmp	r0, #2
 8001134:	d9e3      	bls.n	80010fe <RCCEx_PLLSAI1_Config+0xde>
 8001136:	e7cd      	b.n	80010d4 <RCCEx_PLLSAI1_Config+0xb4>
 8001138:	40021000 	.word	0x40021000

0800113c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800113e:	4b3d      	ldr	r3, [pc, #244]	; (8001234 <RCCEx_PLLSAI2_Config+0xf8>)
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	f012 0f03 	tst.w	r2, #3
{
 8001146:	4605      	mov	r5, r0
 8001148:	460e      	mov	r6, r1
 800114a:	461c      	mov	r4, r3
 800114c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800114e:	d028      	beq.n	80011a2 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001150:	68da      	ldr	r2, [r3, #12]
 8001152:	f002 0203 	and.w	r2, r2, #3
 8001156:	4282      	cmp	r2, r0
 8001158:	d13a      	bne.n	80011d0 <RCCEx_PLLSAI2_Config+0x94>
       ||
 800115a:	2a00      	cmp	r2, #0
 800115c:	d038      	beq.n	80011d0 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800115e:	68db      	ldr	r3, [r3, #12]
       ||
 8001160:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001162:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001166:	3301      	adds	r3, #1
       ||
 8001168:	4293      	cmp	r3, r2
 800116a:	d131      	bne.n	80011d0 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001172:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001174:	f7ff f9f8 	bl	8000568 <HAL_GetTick>
 8001178:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	009a      	lsls	r2, r3, #2
 800117e:	d430      	bmi.n	80011e2 <RCCEx_PLLSAI2_Config+0xa6>
 8001180:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001182:	2e00      	cmp	r6, #0
 8001184:	d034      	beq.n	80011f0 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001186:	6963      	ldr	r3, [r4, #20]
 8001188:	6929      	ldr	r1, [r5, #16]
 800118a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800118e:	0849      	lsrs	r1, r1, #1
 8001190:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001194:	3901      	subs	r1, #1
 8001196:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800119a:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800119e:	6163      	str	r3, [r4, #20]
 80011a0:	e032      	b.n	8001208 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 80011a2:	2802      	cmp	r0, #2
 80011a4:	d010      	beq.n	80011c8 <RCCEx_PLLSAI2_Config+0x8c>
 80011a6:	2803      	cmp	r0, #3
 80011a8:	d014      	beq.n	80011d4 <RCCEx_PLLSAI2_Config+0x98>
 80011aa:	2801      	cmp	r0, #1
 80011ac:	d110      	bne.n	80011d0 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	079f      	lsls	r7, r3, #30
 80011b2:	d538      	bpl.n	8001226 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80011b4:	68e3      	ldr	r3, [r4, #12]
 80011b6:	686a      	ldr	r2, [r5, #4]
 80011b8:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80011bc:	3a01      	subs	r2, #1
 80011be:	4318      	orrs	r0, r3
 80011c0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80011c4:	60e0      	str	r0, [r4, #12]
 80011c6:	e7d1      	b.n	800116c <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80011ce:	d1f1      	bne.n	80011b4 <RCCEx_PLLSAI2_Config+0x78>
 80011d0:	2001      	movs	r0, #1
 80011d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	0391      	lsls	r1, r2, #14
 80011d8:	d4ec      	bmi.n	80011b4 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80011e0:	e7f5      	b.n	80011ce <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80011e2:	f7ff f9c1 	bl	8000568 <HAL_GetTick>
 80011e6:	1bc0      	subs	r0, r0, r7
 80011e8:	2802      	cmp	r0, #2
 80011ea:	d9c6      	bls.n	800117a <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 80011ec:	2003      	movs	r0, #3
 80011ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80011f0:	6962      	ldr	r2, [r4, #20]
 80011f2:	68eb      	ldr	r3, [r5, #12]
 80011f4:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 80011f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80011fc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8001206:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001210:	f7ff f9aa 	bl	8000568 <HAL_GetTick>
 8001214:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001216:	6823      	ldr	r3, [r4, #0]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	d505      	bpl.n	8001228 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800121c:	6963      	ldr	r3, [r4, #20]
 800121e:	696a      	ldr	r2, [r5, #20]
 8001220:	4313      	orrs	r3, r2
 8001222:	6163      	str	r3, [r4, #20]
 8001224:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001228:	f7ff f99e 	bl	8000568 <HAL_GetTick>
 800122c:	1b80      	subs	r0, r0, r6
 800122e:	2802      	cmp	r0, #2
 8001230:	d9f1      	bls.n	8001216 <RCCEx_PLLSAI2_Config+0xda>
 8001232:	e7db      	b.n	80011ec <RCCEx_PLLSAI2_Config+0xb0>
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001238:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800123c:	6806      	ldr	r6, [r0, #0]
 800123e:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8001242:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001244:	d024      	beq.n	8001290 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001246:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001248:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800124c:	d02c      	beq.n	80012a8 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800124e:	d802      	bhi.n	8001256 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001250:	b1c1      	cbz	r1, 8001284 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8001252:	2601      	movs	r6, #1
 8001254:	e01c      	b.n	8001290 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001256:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800125a:	d00d      	beq.n	8001278 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800125c:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001260:	d1f7      	bne.n	8001252 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001262:	4a4d      	ldr	r2, [pc, #308]	; (8001398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001264:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001266:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800126a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800126e:	430b      	orrs	r3, r1
 8001270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001274:	2600      	movs	r6, #0
 8001276:	e00b      	b.n	8001290 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001278:	4a47      	ldr	r2, [pc, #284]	; (8001398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800127a:	68d3      	ldr	r3, [r2, #12]
 800127c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001280:	60d3      	str	r3, [r2, #12]
      break;
 8001282:	e7ee      	b.n	8001262 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001284:	3004      	adds	r0, #4
 8001286:	f7ff fecb 	bl	8001020 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800128a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800128c:	2800      	cmp	r0, #0
 800128e:	d0e8      	beq.n	8001262 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001290:	6823      	ldr	r3, [r4, #0]
 8001292:	04d8      	lsls	r0, r3, #19
 8001294:	d506      	bpl.n	80012a4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001296:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001298:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800129c:	d074      	beq.n	8001388 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800129e:	d808      	bhi.n	80012b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80012a0:	b1a9      	cbz	r1, 80012ce <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 80012a2:	2601      	movs	r6, #1
 80012a4:	4635      	mov	r5, r6
 80012a6:	e021      	b.n	80012ec <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80012a8:	2100      	movs	r1, #0
 80012aa:	3020      	adds	r0, #32
 80012ac:	f7ff ff46 	bl	800113c <RCCEx_PLLSAI2_Config>
 80012b0:	e7eb      	b.n	800128a <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 80012b2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80012b6:	d004      	beq.n	80012c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80012b8:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80012bc:	d1f1      	bne.n	80012a2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80012be:	4635      	mov	r5, r6
 80012c0:	e009      	b.n	80012d6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80012c2:	4a35      	ldr	r2, [pc, #212]	; (8001398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80012c4:	68d3      	ldr	r3, [r2, #12]
 80012c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ca:	60d3      	str	r3, [r2, #12]
 80012cc:	e7f7      	b.n	80012be <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80012ce:	1d20      	adds	r0, r4, #4
 80012d0:	f7ff fea6 	bl	8001020 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80012d4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80012d6:	2d00      	cmp	r5, #0
 80012d8:	d15c      	bne.n	8001394 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80012da:	4a2f      	ldr	r2, [pc, #188]	; (8001398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80012dc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80012de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80012e2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80012e6:	430b      	orrs	r3, r1
 80012e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	0399      	lsls	r1, r3, #14
 80012f0:	f140 814f 	bpl.w	8001592 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80012f4:	4f28      	ldr	r7, [pc, #160]	; (8001398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80012f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012f8:	00da      	lsls	r2, r3, #3
 80012fa:	f140 8176 	bpl.w	80015ea <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 80012fe:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001302:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800139c <HAL_RCCEx_PeriphCLKConfig+0x164>
 8001306:	f8d9 3000 	ldr.w	r3, [r9]
 800130a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130e:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8001312:	f7ff f929 	bl	8000568 <HAL_GetTick>
 8001316:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001318:	f8d9 3000 	ldr.w	r3, [r9]
 800131c:	05db      	lsls	r3, r3, #23
 800131e:	d53f      	bpl.n	80013a0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8001320:	2d00      	cmp	r5, #0
 8001322:	d144      	bne.n	80013ae <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001324:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001328:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800132c:	d015      	beq.n	800135a <HAL_RCCEx_PeriphCLKConfig+0x122>
 800132e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001332:	4293      	cmp	r3, r2
 8001334:	d011      	beq.n	800135a <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001336:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800133a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800133e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001342:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001346:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800134a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800134e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001352:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800135a:	07d8      	lsls	r0, r3, #31
 800135c:	d509      	bpl.n	8001372 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 800135e:	f7ff f903 	bl	8000568 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001362:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001366:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001368:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800136c:	0799      	lsls	r1, r3, #30
 800136e:	f140 8109 	bpl.w	8001584 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001372:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001376:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800137a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800137e:	4313      	orrs	r3, r2
 8001380:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001384:	4635      	mov	r5, r6
 8001386:	e012      	b.n	80013ae <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001388:	2100      	movs	r1, #0
 800138a:	f104 0020 	add.w	r0, r4, #32
 800138e:	f7ff fed5 	bl	800113c <RCCEx_PLLSAI2_Config>
 8001392:	e79f      	b.n	80012d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001394:	462e      	mov	r6, r5
 8001396:	e7a9      	b.n	80012ec <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001398:	40021000 	.word	0x40021000
 800139c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a0:	f7ff f8e2 	bl	8000568 <HAL_GetTick>
 80013a4:	eba0 000a 	sub.w	r0, r0, sl
 80013a8:	2802      	cmp	r0, #2
 80013aa:	d9b5      	bls.n	8001318 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 80013ac:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80013ae:	f1b8 0f00 	cmp.w	r8, #0
 80013b2:	d003      	beq.n	80013bc <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ba:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80013bc:	6823      	ldr	r3, [r4, #0]
 80013be:	07da      	lsls	r2, r3, #31
 80013c0:	d508      	bpl.n	80013d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80013c2:	4990      	ldr	r1, [pc, #576]	; (8001604 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80013c4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80013c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013ca:	f022 0203 	bic.w	r2, r2, #3
 80013ce:	4302      	orrs	r2, r0
 80013d0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80013d4:	079f      	lsls	r7, r3, #30
 80013d6:	d508      	bpl.n	80013ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80013d8:	498a      	ldr	r1, [pc, #552]	; (8001604 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80013da:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80013dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013e0:	f022 020c 	bic.w	r2, r2, #12
 80013e4:	4302      	orrs	r2, r0
 80013e6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80013ea:	075e      	lsls	r6, r3, #29
 80013ec:	d508      	bpl.n	8001400 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80013ee:	4985      	ldr	r1, [pc, #532]	; (8001604 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80013f0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80013f2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013f6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80013fa:	4302      	orrs	r2, r0
 80013fc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001400:	0718      	lsls	r0, r3, #28
 8001402:	d508      	bpl.n	8001416 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001404:	497f      	ldr	r1, [pc, #508]	; (8001604 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001406:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001408:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800140c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001410:	4302      	orrs	r2, r0
 8001412:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001416:	06d9      	lsls	r1, r3, #27
 8001418:	d508      	bpl.n	800142c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800141a:	497a      	ldr	r1, [pc, #488]	; (8001604 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800141c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800141e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001422:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001426:	4302      	orrs	r2, r0
 8001428:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800142c:	069a      	lsls	r2, r3, #26
 800142e:	d508      	bpl.n	8001442 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001430:	4974      	ldr	r1, [pc, #464]	; (8001604 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001432:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001434:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001438:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800143c:	4302      	orrs	r2, r0
 800143e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001442:	059f      	lsls	r7, r3, #22
 8001444:	d508      	bpl.n	8001458 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001446:	496f      	ldr	r1, [pc, #444]	; (8001604 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001448:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800144a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800144e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001452:	4302      	orrs	r2, r0
 8001454:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001458:	055e      	lsls	r6, r3, #21
 800145a:	d508      	bpl.n	800146e <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800145c:	4969      	ldr	r1, [pc, #420]	; (8001604 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800145e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001460:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001464:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001468:	4302      	orrs	r2, r0
 800146a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800146e:	0658      	lsls	r0, r3, #25
 8001470:	d508      	bpl.n	8001484 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001472:	4964      	ldr	r1, [pc, #400]	; (8001604 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001474:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001476:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800147a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800147e:	4302      	orrs	r2, r0
 8001480:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001484:	0619      	lsls	r1, r3, #24
 8001486:	d508      	bpl.n	800149a <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001488:	495e      	ldr	r1, [pc, #376]	; (8001604 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800148a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800148c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001490:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001494:	4302      	orrs	r2, r0
 8001496:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800149a:	05da      	lsls	r2, r3, #23
 800149c:	d508      	bpl.n	80014b0 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800149e:	4959      	ldr	r1, [pc, #356]	; (8001604 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80014a6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80014aa:	4302      	orrs	r2, r0
 80014ac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80014b0:	049b      	lsls	r3, r3, #18
 80014b2:	d50f      	bpl.n	80014d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80014b4:	4a53      	ldr	r2, [pc, #332]	; (8001604 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014b6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80014b8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80014bc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80014c0:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80014c2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80014c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80014ca:	d164      	bne.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80014cc:	68d3      	ldr	r3, [r2, #12]
 80014ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014d2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80014d4:	6823      	ldr	r3, [r4, #0]
 80014d6:	031f      	lsls	r7, r3, #12
 80014d8:	d50f      	bpl.n	80014fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80014da:	4a4a      	ldr	r2, [pc, #296]	; (8001604 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014dc:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80014de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80014e2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80014e6:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80014e8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80014f0:	d15c      	bne.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80014f2:	68d3      	ldr	r3, [r2, #12]
 80014f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014f8:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	035e      	lsls	r6, r3, #13
 80014fe:	d50f      	bpl.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001500:	4a40      	ldr	r2, [pc, #256]	; (8001604 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001502:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001504:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001508:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800150c:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800150e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001512:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001516:	d154      	bne.n	80015c2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001518:	68d3      	ldr	r3, [r2, #12]
 800151a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800151e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	0458      	lsls	r0, r3, #17
 8001524:	d512      	bpl.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001526:	4937      	ldr	r1, [pc, #220]	; (8001604 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001528:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800152a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800152e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001532:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001534:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800153c:	d14c      	bne.n	80015d8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800153e:	2102      	movs	r1, #2
 8001540:	1d20      	adds	r0, r4, #4
 8001542:	f7ff fd6d 	bl	8001020 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001546:	2800      	cmp	r0, #0
 8001548:	bf18      	it	ne
 800154a:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800154c:	6822      	ldr	r2, [r4, #0]
 800154e:	0411      	lsls	r1, r2, #16
 8001550:	d508      	bpl.n	8001564 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001552:	492c      	ldr	r1, [pc, #176]	; (8001604 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001554:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001556:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800155a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800155e:	4303      	orrs	r3, r0
 8001560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001564:	03d3      	lsls	r3, r2, #15
 8001566:	d509      	bpl.n	800157c <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001568:	4a26      	ldr	r2, [pc, #152]	; (8001604 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800156a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800156e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001572:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001576:	430b      	orrs	r3, r1
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800157c:	4628      	mov	r0, r5
 800157e:	b002      	add	sp, #8
 8001580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001584:	f7fe fff0 	bl	8000568 <HAL_GetTick>
 8001588:	1b40      	subs	r0, r0, r5
 800158a:	4548      	cmp	r0, r9
 800158c:	f67f aeec 	bls.w	8001368 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8001590:	e70c      	b.n	80013ac <HAL_RCCEx_PeriphCLKConfig+0x174>
 8001592:	4635      	mov	r5, r6
 8001594:	e712      	b.n	80013bc <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001596:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800159a:	d19b      	bne.n	80014d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800159c:	2101      	movs	r1, #1
 800159e:	1d20      	adds	r0, r4, #4
 80015a0:	f7ff fd3e 	bl	8001020 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80015a4:	2800      	cmp	r0, #0
 80015a6:	bf18      	it	ne
 80015a8:	4605      	movne	r5, r0
 80015aa:	e793      	b.n	80014d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80015ac:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80015b0:	d1a3      	bne.n	80014fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80015b2:	2101      	movs	r1, #1
 80015b4:	1d20      	adds	r0, r4, #4
 80015b6:	f7ff fd33 	bl	8001020 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80015ba:	2800      	cmp	r0, #0
 80015bc:	bf18      	it	ne
 80015be:	4605      	movne	r5, r0
 80015c0:	e79b      	b.n	80014fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80015c2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80015c6:	d1ab      	bne.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80015c8:	2101      	movs	r1, #1
 80015ca:	1d20      	adds	r0, r4, #4
 80015cc:	f7ff fd28 	bl	8001020 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80015d0:	2800      	cmp	r0, #0
 80015d2:	bf18      	it	ne
 80015d4:	4605      	movne	r5, r0
 80015d6:	e7a3      	b.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80015d8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80015dc:	d1b6      	bne.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80015de:	2102      	movs	r1, #2
 80015e0:	f104 0020 	add.w	r0, r4, #32
 80015e4:	f7ff fdaa 	bl	800113c <RCCEx_PLLSAI2_Config>
 80015e8:	e7ad      	b.n	8001546 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80015f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015fc:	f04f 0801 	mov.w	r8, #1
 8001600:	e67f      	b.n	8001302 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000

08001608 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8001608:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800160a:	69c1      	ldr	r1, [r0, #28]
{
 800160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001610:	6883      	ldr	r3, [r0, #8]
 8001612:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001614:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001616:	4303      	orrs	r3, r0
 8001618:	6960      	ldr	r0, [r4, #20]
 800161a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800161c:	48ba      	ldr	r0, [pc, #744]	; (8001908 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800161e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001620:	4028      	ands	r0, r5
 8001622:	4303      	orrs	r3, r0
 8001624:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001626:	6853      	ldr	r3, [r2, #4]
 8001628:	68e0      	ldr	r0, [r4, #12]
 800162a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800162e:	4303      	orrs	r3, r0
 8001630:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001632:	4bb6      	ldr	r3, [pc, #728]	; (800190c <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001634:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001636:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001638:	bf1c      	itt	ne
 800163a:	6a23      	ldrne	r3, [r4, #32]
 800163c:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800163e:	6893      	ldr	r3, [r2, #8]
 8001640:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001644:	4303      	orrs	r3, r0
 8001646:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001648:	4bb1      	ldr	r3, [pc, #708]	; (8001910 <UART_SetConfig+0x308>)
 800164a:	429a      	cmp	r2, r3
 800164c:	d119      	bne.n	8001682 <UART_SetConfig+0x7a>
 800164e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001652:	4ab0      	ldr	r2, [pc, #704]	; (8001914 <UART_SetConfig+0x30c>)
 8001654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001658:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800165c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001660:	5cd3      	ldrb	r3, [r2, r3]
 8001662:	f040 8138 	bne.w	80018d6 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8001666:	2b08      	cmp	r3, #8
 8001668:	f200 808f 	bhi.w	800178a <UART_SetConfig+0x182>
 800166c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001670:	00ca011a 	.word	0x00ca011a
 8001674:	008d00f9 	.word	0x008d00f9
 8001678:	008d0114 	.word	0x008d0114
 800167c:	008d008d 	.word	0x008d008d
 8001680:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001682:	4ba5      	ldr	r3, [pc, #660]	; (8001918 <UART_SetConfig+0x310>)
 8001684:	429a      	cmp	r2, r3
 8001686:	d107      	bne.n	8001698 <UART_SetConfig+0x90>
 8001688:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800168c:	4aa3      	ldr	r2, [pc, #652]	; (800191c <UART_SetConfig+0x314>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	e7e1      	b.n	800165c <UART_SetConfig+0x54>
 8001698:	4ba1      	ldr	r3, [pc, #644]	; (8001920 <UART_SetConfig+0x318>)
 800169a:	429a      	cmp	r2, r3
 800169c:	d123      	bne.n	80016e6 <UART_SetConfig+0xde>
 800169e:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80016a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80016aa:	2b10      	cmp	r3, #16
 80016ac:	f000 80f1 	beq.w	8001892 <UART_SetConfig+0x28a>
 80016b0:	d80b      	bhi.n	80016ca <UART_SetConfig+0xc2>
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 80f3 	beq.w	800189e <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016b8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80016bc:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80016c0:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016c4:	f000 80f8 	beq.w	80018b8 <UART_SetConfig+0x2b0>
 80016c8:	e0a8      	b.n	800181c <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	f000 80c6 	beq.w	800185c <UART_SetConfig+0x254>
 80016d0:	2b30      	cmp	r3, #48	; 0x30
 80016d2:	d1f1      	bne.n	80016b8 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016d4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80016d8:	f040 80b8 	bne.w	800184c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80016dc:	6860      	ldr	r0, [r4, #4]
 80016de:	0843      	lsrs	r3, r0, #1
 80016e0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80016e4:	e0c3      	b.n	800186e <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016e6:	4b8f      	ldr	r3, [pc, #572]	; (8001924 <UART_SetConfig+0x31c>)
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d11e      	bne.n	800172a <UART_SetConfig+0x122>
 80016ec:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80016f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80016f8:	2b40      	cmp	r3, #64	; 0x40
 80016fa:	f000 80bb 	beq.w	8001874 <UART_SetConfig+0x26c>
 80016fe:	d80a      	bhi.n	8001716 <UART_SetConfig+0x10e>
 8001700:	b97b      	cbnz	r3, 8001722 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001702:	4b82      	ldr	r3, [pc, #520]	; (800190c <UART_SetConfig+0x304>)
 8001704:	429a      	cmp	r2, r3
 8001706:	f040 80ca 	bne.w	800189e <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800170a:	f7ff fc65 	bl	8000fd8 <HAL_RCC_GetPCLK1Freq>
        break;
 800170e:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8001710:	bbb0      	cbnz	r0, 8001780 <UART_SetConfig+0x178>
 8001712:	4602      	mov	r2, r0
 8001714:	e03a      	b.n	800178c <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001716:	2b80      	cmp	r3, #128	; 0x80
 8001718:	f000 809d 	beq.w	8001856 <UART_SetConfig+0x24e>
 800171c:	2bc0      	cmp	r3, #192	; 0xc0
 800171e:	f000 80b0 	beq.w	8001882 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001722:	4b7a      	ldr	r3, [pc, #488]	; (800190c <UART_SetConfig+0x304>)
 8001724:	429a      	cmp	r2, r3
 8001726:	d1c7      	bne.n	80016b8 <UART_SetConfig+0xb0>
 8001728:	e02f      	b.n	800178a <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800172a:	4b7f      	ldr	r3, [pc, #508]	; (8001928 <UART_SetConfig+0x320>)
 800172c:	429a      	cmp	r2, r3
 800172e:	d111      	bne.n	8001754 <UART_SetConfig+0x14c>
 8001730:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8001734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800173c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001740:	f000 8098 	beq.w	8001874 <UART_SetConfig+0x26c>
 8001744:	d9dc      	bls.n	8001700 <UART_SetConfig+0xf8>
 8001746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800174a:	f000 8084 	beq.w	8001856 <UART_SetConfig+0x24e>
 800174e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001752:	e7e4      	b.n	800171e <UART_SetConfig+0x116>
 8001754:	4b6d      	ldr	r3, [pc, #436]	; (800190c <UART_SetConfig+0x304>)
 8001756:	429a      	cmp	r2, r3
 8001758:	d1ae      	bne.n	80016b8 <UART_SetConfig+0xb0>
 800175a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800175e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001762:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800176a:	f000 8083 	beq.w	8001874 <UART_SetConfig+0x26c>
 800176e:	d9c7      	bls.n	8001700 <UART_SetConfig+0xf8>
 8001770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001774:	d06f      	beq.n	8001856 <UART_SetConfig+0x24e>
 8001776:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800177a:	e7d0      	b.n	800171e <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800177c:	486b      	ldr	r0, [pc, #428]	; (800192c <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 800177e:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001780:	6862      	ldr	r2, [r4, #4]
 8001782:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001786:	4281      	cmp	r1, r0
 8001788:	d905      	bls.n	8001796 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 800178a:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800178c:	2300      	movs	r3, #0
 800178e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001790:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001792:	4610      	mov	r0, r2
 8001794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001796:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800179a:	d8f6      	bhi.n	800178a <UART_SetConfig+0x182>
        switch (clocksource)
 800179c:	2b08      	cmp	r3, #8
 800179e:	d82e      	bhi.n	80017fe <UART_SetConfig+0x1f6>
 80017a0:	e8df f003 	tbb	[pc, r3]
 80017a4:	2d1c2d05 	.word	0x2d1c2d05
 80017a8:	2d2d2d24 	.word	0x2d2d2d24
 80017ac:	27          	.byte	0x27
 80017ad:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80017ae:	f7ff fc13 	bl	8000fd8 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80017b2:	6862      	ldr	r2, [r4, #4]
 80017b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b8:	0856      	lsrs	r6, r2, #1
 80017ba:	2700      	movs	r7, #0
 80017bc:	fbe1 6700 	umlal	r6, r7, r1, r0
 80017c0:	2300      	movs	r3, #0
 80017c2:	4630      	mov	r0, r6
 80017c4:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80017c6:	f7fe fcff 	bl	80001c8 <__aeabi_uldivmod>
            break;
 80017ca:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80017cc:	4b58      	ldr	r3, [pc, #352]	; (8001930 <UART_SetConfig+0x328>)
 80017ce:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80017d2:	4299      	cmp	r1, r3
 80017d4:	d8d9      	bhi.n	800178a <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 80017d6:	6823      	ldr	r3, [r4, #0]
 80017d8:	60d8      	str	r0, [r3, #12]
 80017da:	e7d7      	b.n	800178c <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80017dc:	4855      	ldr	r0, [pc, #340]	; (8001934 <UART_SetConfig+0x32c>)
 80017de:	0855      	lsrs	r5, r2, #1
 80017e0:	2300      	movs	r3, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80017e6:	f141 0100 	adc.w	r1, r1, #0
 80017ea:	e7ec      	b.n	80017c6 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80017ec:	f7ff f8ae 	bl	800094c <HAL_RCC_GetSysClockFreq>
 80017f0:	e7df      	b.n	80017b2 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80017f2:	0850      	lsrs	r0, r2, #1
 80017f4:	2100      	movs	r1, #0
 80017f6:	2300      	movs	r3, #0
 80017f8:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80017fc:	e7f3      	b.n	80017e6 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 80017fe:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001800:	2000      	movs	r0, #0
 8001802:	e7e3      	b.n	80017cc <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001804:	f7ff fbfa 	bl	8000ffc <HAL_RCC_GetPCLK2Freq>
 8001808:	e04e      	b.n	80018a8 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800180a:	f7ff fbe5 	bl	8000fd8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800180e:	6862      	ldr	r2, [r4, #4]
 8001810:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001814:	fbb3 f3f2 	udiv	r3, r3, r2
 8001818:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800181a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800181c:	f1a3 0010 	sub.w	r0, r3, #16
 8001820:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001824:	4288      	cmp	r0, r1
 8001826:	d8b0      	bhi.n	800178a <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8001828:	6821      	ldr	r1, [r4, #0]
 800182a:	60cb      	str	r3, [r1, #12]
 800182c:	e7ae      	b.n	800178c <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800182e:	f7ff fbe5 	bl	8000ffc <HAL_RCC_GetPCLK2Freq>
 8001832:	e7ec      	b.n	800180e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001834:	6860      	ldr	r0, [r4, #4]
 8001836:	0843      	lsrs	r3, r0, #1
 8001838:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800183c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001840:	fbb3 f3f0 	udiv	r3, r3, r0
 8001844:	e7e8      	b.n	8001818 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001846:	f7ff f881 	bl	800094c <HAL_RCC_GetSysClockFreq>
 800184a:	e7e0      	b.n	800180e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800184c:	6860      	ldr	r0, [r4, #4]
 800184e:	0843      	lsrs	r3, r0, #1
 8001850:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001854:	e7f4      	b.n	8001840 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001856:	4b2d      	ldr	r3, [pc, #180]	; (800190c <UART_SetConfig+0x304>)
 8001858:	429a      	cmp	r2, r3
 800185a:	d08f      	beq.n	800177c <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800185c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001860:	d1e8      	bne.n	8001834 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001862:	6860      	ldr	r0, [r4, #4]
 8001864:	0843      	lsrs	r3, r0, #1
 8001866:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800186a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800186e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001872:	e01f      	b.n	80018b4 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001874:	4b25      	ldr	r3, [pc, #148]	; (800190c <UART_SetConfig+0x304>)
 8001876:	429a      	cmp	r2, r3
 8001878:	d10b      	bne.n	8001892 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800187a:	f7ff f867 	bl	800094c <HAL_RCC_GetSysClockFreq>
        break;
 800187e:	2304      	movs	r3, #4
 8001880:	e746      	b.n	8001710 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001882:	4b22      	ldr	r3, [pc, #136]	; (800190c <UART_SetConfig+0x304>)
 8001884:	429a      	cmp	r2, r3
 8001886:	f47f af25 	bne.w	80016d4 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800188a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 800188e:	2308      	movs	r3, #8
 8001890:	e776      	b.n	8001780 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001892:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001896:	d1d6      	bne.n	8001846 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001898:	f7ff f858 	bl	800094c <HAL_RCC_GetSysClockFreq>
 800189c:	e004      	b.n	80018a8 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800189e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80018a2:	d1b2      	bne.n	800180a <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80018a4:	f7ff fb98 	bl	8000fd8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80018a8:	6861      	ldr	r1, [r4, #4]
 80018aa:	084a      	lsrs	r2, r1, #1
 80018ac:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80018b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80018b6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80018b8:	f1a3 0010 	sub.w	r0, r3, #16
 80018bc:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80018c0:	4288      	cmp	r0, r1
 80018c2:	f63f af62 	bhi.w	800178a <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80018c6:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 80018ca:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80018cc:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80018d0:	430b      	orrs	r3, r1
 80018d2:	60c3      	str	r3, [r0, #12]
 80018d4:	e75a      	b.n	800178c <UART_SetConfig+0x184>
    switch (clocksource)
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	f63f af57 	bhi.w	800178a <UART_SetConfig+0x182>
 80018dc:	a201      	add	r2, pc, #4	; (adr r2, 80018e4 <UART_SetConfig+0x2dc>)
 80018de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e2:	bf00      	nop
 80018e4:	0800180b 	.word	0x0800180b
 80018e8:	0800182f 	.word	0x0800182f
 80018ec:	08001835 	.word	0x08001835
 80018f0:	0800178b 	.word	0x0800178b
 80018f4:	08001847 	.word	0x08001847
 80018f8:	0800178b 	.word	0x0800178b
 80018fc:	0800178b 	.word	0x0800178b
 8001900:	0800178b 	.word	0x0800178b
 8001904:	0800184d 	.word	0x0800184d
 8001908:	efff69f3 	.word	0xefff69f3
 800190c:	40008000 	.word	0x40008000
 8001910:	40013800 	.word	0x40013800
 8001914:	08002140 	.word	0x08002140
 8001918:	40004400 	.word	0x40004400
 800191c:	08002144 	.word	0x08002144
 8001920:	40004800 	.word	0x40004800
 8001924:	40004c00 	.word	0x40004c00
 8001928:	40005000 	.word	0x40005000
 800192c:	00f42400 	.word	0x00f42400
 8001930:	000ffcff 	.word	0x000ffcff
 8001934:	f4240000 	.word	0xf4240000

08001938 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001938:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800193a:	07da      	lsls	r2, r3, #31
{
 800193c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800193e:	d506      	bpl.n	800194e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001940:	6801      	ldr	r1, [r0, #0]
 8001942:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001944:	684a      	ldr	r2, [r1, #4]
 8001946:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800194a:	4322      	orrs	r2, r4
 800194c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800194e:	079c      	lsls	r4, r3, #30
 8001950:	d506      	bpl.n	8001960 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001952:	6801      	ldr	r1, [r0, #0]
 8001954:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001956:	684a      	ldr	r2, [r1, #4]
 8001958:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800195c:	4322      	orrs	r2, r4
 800195e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001960:	0759      	lsls	r1, r3, #29
 8001962:	d506      	bpl.n	8001972 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001964:	6801      	ldr	r1, [r0, #0]
 8001966:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001968:	684a      	ldr	r2, [r1, #4]
 800196a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800196e:	4322      	orrs	r2, r4
 8001970:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001972:	071a      	lsls	r2, r3, #28
 8001974:	d506      	bpl.n	8001984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001976:	6801      	ldr	r1, [r0, #0]
 8001978:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800197a:	684a      	ldr	r2, [r1, #4]
 800197c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001980:	4322      	orrs	r2, r4
 8001982:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001984:	06dc      	lsls	r4, r3, #27
 8001986:	d506      	bpl.n	8001996 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001988:	6801      	ldr	r1, [r0, #0]
 800198a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800198c:	688a      	ldr	r2, [r1, #8]
 800198e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001992:	4322      	orrs	r2, r4
 8001994:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001996:	0699      	lsls	r1, r3, #26
 8001998:	d506      	bpl.n	80019a8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800199a:	6801      	ldr	r1, [r0, #0]
 800199c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800199e:	688a      	ldr	r2, [r1, #8]
 80019a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019a4:	4322      	orrs	r2, r4
 80019a6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80019a8:	065a      	lsls	r2, r3, #25
 80019aa:	d50f      	bpl.n	80019cc <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80019ac:	6801      	ldr	r1, [r0, #0]
 80019ae:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80019b0:	684a      	ldr	r2, [r1, #4]
 80019b2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80019b6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80019b8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80019bc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80019be:	d105      	bne.n	80019cc <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80019c0:	684a      	ldr	r2, [r1, #4]
 80019c2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80019c4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80019c8:	4322      	orrs	r2, r4
 80019ca:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80019cc:	061b      	lsls	r3, r3, #24
 80019ce:	d506      	bpl.n	80019de <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80019d0:	6802      	ldr	r2, [r0, #0]
 80019d2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80019d4:	6853      	ldr	r3, [r2, #4]
 80019d6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80019da:	430b      	orrs	r3, r1
 80019dc:	6053      	str	r3, [r2, #4]
 80019de:	bd10      	pop	{r4, pc}

080019e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80019e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019e4:	9d06      	ldr	r5, [sp, #24]
 80019e6:	4604      	mov	r4, r0
 80019e8:	460f      	mov	r7, r1
 80019ea:	4616      	mov	r6, r2
 80019ec:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019ee:	6821      	ldr	r1, [r4, #0]
 80019f0:	69ca      	ldr	r2, [r1, #28]
 80019f2:	ea37 0302 	bics.w	r3, r7, r2
 80019f6:	bf0c      	ite	eq
 80019f8:	2201      	moveq	r2, #1
 80019fa:	2200      	movne	r2, #0
 80019fc:	42b2      	cmp	r2, r6
 80019fe:	d002      	beq.n	8001a06 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001a00:	2000      	movs	r0, #0
}
 8001a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001a06:	1c6b      	adds	r3, r5, #1
 8001a08:	d0f2      	beq.n	80019f0 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a0a:	f7fe fdad 	bl	8000568 <HAL_GetTick>
 8001a0e:	eba0 0008 	sub.w	r0, r0, r8
 8001a12:	4285      	cmp	r5, r0
 8001a14:	d301      	bcc.n	8001a1a <UART_WaitOnFlagUntilTimeout+0x3a>
 8001a16:	2d00      	cmp	r5, #0
 8001a18:	d1e9      	bne.n	80019ee <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a22:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	f022 0201 	bic.w	r2, r2, #1
 8001a2a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001a2c:	2320      	movs	r3, #32
 8001a2e:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001a30:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001a32:	2300      	movs	r3, #0
 8001a34:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001a38:	2003      	movs	r0, #3
 8001a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a3e <UART_CheckIdleState>:
{
 8001a3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a40:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a42:	2600      	movs	r6, #0
 8001a44:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001a46:	f7fe fd8f 	bl	8000568 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001a50:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a52:	d415      	bmi.n	8001a80 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a54:	6823      	ldr	r3, [r4, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	075b      	lsls	r3, r3, #29
 8001a5a:	d50a      	bpl.n	8001a72 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2200      	movs	r2, #0
 8001a64:	462b      	mov	r3, r5
 8001a66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f7ff ffb8 	bl	80019e0 <UART_WaitOnFlagUntilTimeout>
 8001a70:	b990      	cbnz	r0, 8001a98 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8001a72:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001a74:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001a76:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8001a78:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001a7c:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8001a7e:	e00c      	b.n	8001a9a <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	4632      	mov	r2, r6
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f7ff ffa6 	bl	80019e0 <UART_WaitOnFlagUntilTimeout>
 8001a94:	2800      	cmp	r0, #0
 8001a96:	d0dd      	beq.n	8001a54 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001a98:	2003      	movs	r0, #3
}
 8001a9a:	b002      	add	sp, #8
 8001a9c:	bd70      	pop	{r4, r5, r6, pc}

08001a9e <HAL_UART_Init>:
{
 8001a9e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	b340      	cbz	r0, 8001af6 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001aa4:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001aa6:	b91b      	cbnz	r3, 8001ab0 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8001aa8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001aac:	f000 fab4 	bl	8002018 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001ab0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001ab2:	2324      	movs	r3, #36	; 0x24
 8001ab4:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001ab6:	6813      	ldr	r3, [r2, #0]
 8001ab8:	f023 0301 	bic.w	r3, r3, #1
 8001abc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001abe:	4620      	mov	r0, r4
 8001ac0:	f7ff fda2 	bl	8001608 <UART_SetConfig>
 8001ac4:	2801      	cmp	r0, #1
 8001ac6:	d016      	beq.n	8001af6 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001aca:	b113      	cbz	r3, 8001ad2 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8001acc:	4620      	mov	r0, r4
 8001ace:	f7ff ff33 	bl	8001938 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ae2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001aea:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001aec:	601a      	str	r2, [r3, #0]
}
 8001aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001af2:	f7ff bfa4 	b.w	8001a3e <UART_CheckIdleState>
}
 8001af6:	2001      	movs	r0, #1
 8001af8:	bd10      	pop	{r4, pc}
	...

08001afc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001afc:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afe:	2214      	movs	r2, #20
{
 8001b00:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b02:	eb0d 0002 	add.w	r0, sp, r2
 8001b06:	2100      	movs	r1, #0
 8001b08:	f000 fb06 	bl	8002118 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0c:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <MX_GPIO_Init+0xc0>)
 8001b0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b10:	f042 0204 	orr.w	r2, r2, #4
 8001b14:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b18:	f002 0204 	and.w	r2, r2, #4
 8001b1c:	9201      	str	r2, [sp, #4]
 8001b1e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b26:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b2a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001b2e:	9202      	str	r2, [sp, #8]
 8001b30:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b34:	f042 0201 	orr.w	r2, r2, #1
 8001b38:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b3c:	f002 0201 	and.w	r2, r2, #1
 8001b40:	9203      	str	r2, [sp, #12]
 8001b42:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b46:	f042 0202 	orr.w	r2, r2, #2
 8001b4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, out1_Pin|out2_Pin|LD2_Pin|out3_Pin 
 8001b52:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b54:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, out1_Pin|out2_Pin|LD2_Pin|out3_Pin 
 8001b56:	f640 71f1 	movw	r1, #4081	; 0xff1
 8001b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, out1_Pin|out2_Pin|LD2_Pin|out3_Pin 
 8001b60:	f7fe fe62 	bl	8000828 <HAL_GPIO_WritePin>
                          |out4_Pin|out5_Pin|out6_Pin|out7_Pin 
                          |out8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8001b6a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_GPIO_Init+0xc4>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b70:	4814      	ldr	r0, [pc, #80]	; (8001bc4 <MX_GPIO_Init+0xc8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b72:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b76:	f7fe fd7b 	bl	8000670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = out1_Pin|out2_Pin|LD2_Pin|out3_Pin 
 8001b7a:	f640 73f1 	movw	r3, #4081	; 0xff1
 8001b7e:	9305      	str	r3, [sp, #20]
                          |out4_Pin|out5_Pin|out6_Pin|out7_Pin 
                          |out8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b82:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b88:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f7fe fd6f 	bl	8000670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = in1_Pin;
 8001b92:	2302      	movs	r3, #2
 8001b94:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(in1_GPIO_Port, &GPIO_InitStruct);
 8001b96:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <MX_GPIO_Init+0xcc>)
 8001b9a:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(in1_GPIO_Port, &GPIO_InitStruct);
 8001b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(in1_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f7fe fd65 	bl	8000670 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 4, 0);
 8001ba6:	4622      	mov	r2, r4
 8001ba8:	2104      	movs	r1, #4
 8001baa:	2007      	movs	r0, #7
 8001bac:	f7fe fd08 	bl	80005c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001bb0:	2007      	movs	r0, #7
 8001bb2:	f7fe fd39 	bl	8000628 <HAL_NVIC_EnableIRQ>

}
 8001bb6:	b00a      	add	sp, #40	; 0x28
 8001bb8:	bd10      	pop	{r4, pc}
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	10210000 	.word	0x10210000
 8001bc4:	48000800 	.word	0x48000800
 8001bc8:	10310000 	.word	0x10310000

08001bcc <f1_port>:
/* USER CODE BEGIN 0 */
void funcion_change();

void f1_port()
{
  HAL_GPIO_WritePin(GPIOA,out1_Pin,GPIO_PIN_SET);
 8001bcc:	2201      	movs	r2, #1
{
 8001bce:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIOA,out1_Pin,GPIO_PIN_SET);
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd6:	f7fe fe27 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001bda:	2064      	movs	r0, #100	; 0x64
 8001bdc:	f7fe fcca 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,out1_Pin,GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2101      	movs	r1, #1
 8001be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be8:	f7fe fe1e 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001bec:	2064      	movs	r0, #100	; 0x64
 8001bee:	f7fe fcc1 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,out2_Pin,GPIO_PIN_SET);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2110      	movs	r1, #16
 8001bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfa:	f7fe fe15 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001bfe:	2064      	movs	r0, #100	; 0x64
 8001c00:	f7fe fcb8 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,out2_Pin,GPIO_PIN_RESET);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2110      	movs	r1, #16
 8001c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0c:	f7fe fe0c 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001c10:	2064      	movs	r0, #100	; 0x64
 8001c12:	f7fe fcaf 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,out3_Pin,GPIO_PIN_SET);
 8001c16:	2201      	movs	r2, #1
 8001c18:	2140      	movs	r1, #64	; 0x40
 8001c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1e:	f7fe fe03 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001c22:	2064      	movs	r0, #100	; 0x64
 8001c24:	f7fe fca6 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,out3_Pin,GPIO_PIN_RESET);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2140      	movs	r1, #64	; 0x40
 8001c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c30:	f7fe fdfa 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001c34:	2064      	movs	r0, #100	; 0x64
 8001c36:	f7fe fc9d 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,out4_Pin,GPIO_PIN_SET);
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c42:	f7fe fdf1 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001c46:	2064      	movs	r0, #100	; 0x64
 8001c48:	f7fe fc94 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,out4_Pin,GPIO_PIN_RESET);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c54:	f7fe fde8 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001c58:	2064      	movs	r0, #100	; 0x64
 8001c5a:	f7fe fc8b 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,out5_Pin,GPIO_PIN_SET);
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c68:	f7fe fdde 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001c6c:	2064      	movs	r0, #100	; 0x64
 8001c6e:	f7fe fc81 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,out5_Pin,GPIO_PIN_RESET);
 8001c72:	2200      	movs	r2, #0
 8001c74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7c:	f7fe fdd4 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001c80:	2064      	movs	r0, #100	; 0x64
 8001c82:	f7fe fc77 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,out6_Pin,GPIO_PIN_SET);
 8001c86:	2201      	movs	r2, #1
 8001c88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c90:	f7fe fdca 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001c94:	2064      	movs	r0, #100	; 0x64
 8001c96:	f7fe fc6d 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,out6_Pin,GPIO_PIN_RESET);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca4:	f7fe fdc0 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001ca8:	2064      	movs	r0, #100	; 0x64
 8001caa:	f7fe fc63 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,out7_Pin,GPIO_PIN_SET);
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb8:	f7fe fdb6 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001cbc:	2064      	movs	r0, #100	; 0x64
 8001cbe:	f7fe fc59 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,out7_Pin,GPIO_PIN_RESET);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ccc:	f7fe fdac 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001cd0:	2064      	movs	r0, #100	; 0x64
 8001cd2:	f7fe fc4f 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,out8_Pin,GPIO_PIN_SET);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce0:	f7fe fda2 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001ce4:	2064      	movs	r0, #100	; 0x64
 8001ce6:	f7fe fc45 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,out8_Pin,GPIO_PIN_RESET);
 8001cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cf4:	f7fe fd98 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001cf8:	2064      	movs	r0, #100	; 0x64
}
 8001cfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(100);
 8001cfe:	f7fe bc39 	b.w	8000574 <HAL_Delay>

08001d02 <f2_port>:

void f2_port(void)
{
 8001d02:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIOA, out4_Pin, 1);
 8001d04:	2201      	movs	r2, #1
 8001d06:	2180      	movs	r1, #128	; 0x80
 8001d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d0c:	f7fe fd8c 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out5_Pin, 1);
 8001d10:	2201      	movs	r2, #1
 8001d12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1a:	f7fe fd85 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(120);
 8001d1e:	2078      	movs	r0, #120	; 0x78
 8001d20:	f7fe fc28 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, out4_Pin, 0);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2c:	f7fe fd7c 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out5_Pin, 0);
 8001d30:	2200      	movs	r2, #0
 8001d32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3a:	f7fe fd75 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out3_Pin, 1);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	2140      	movs	r1, #64	; 0x40
 8001d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d46:	f7fe fd6f 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out6_Pin, 1);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d54:	f7fe fd68 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(120);
 8001d58:	2078      	movs	r0, #120	; 0x78
 8001d5a:	f7fe fc0b 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, out3_Pin, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2140      	movs	r1, #64	; 0x40
 8001d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d66:	f7fe fd5f 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out6_Pin, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d74:	f7fe fd58 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out2_Pin, 1);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2110      	movs	r1, #16
 8001d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d80:	f7fe fd52 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out7_Pin, 1);
 8001d84:	2201      	movs	r2, #1
 8001d86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8e:	f7fe fd4b 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(120);
 8001d92:	2078      	movs	r0, #120	; 0x78
 8001d94:	f7fe fbee 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, out2_Pin, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2110      	movs	r1, #16
 8001d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da0:	f7fe fd42 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out7_Pin, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dae:	f7fe fd3b 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out1_Pin, 1);
 8001db2:	2201      	movs	r2, #1
 8001db4:	4611      	mov	r1, r2
 8001db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dba:	f7fe fd35 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out8_Pin, 1);
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc8:	f7fe fd2e 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(120);
 8001dcc:	2078      	movs	r0, #120	; 0x78
 8001dce:	f7fe fbd1 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, out1_Pin, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dda:	f7fe fd25 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out8_Pin, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de8:	f7fe fd1e 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out2_Pin, 1);
 8001dec:	2201      	movs	r2, #1
 8001dee:	2110      	movs	r1, #16
 8001df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df4:	f7fe fd18 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out7_Pin, 1);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e02:	f7fe fd11 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(25);
 8001e06:	2019      	movs	r0, #25
 8001e08:	f7fe fbb4 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, out2_Pin, 0);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2110      	movs	r1, #16
 8001e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e14:	f7fe fd08 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out7_Pin, 0);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e22:	f7fe fd01 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out3_Pin, 1);
 8001e26:	2201      	movs	r2, #1
 8001e28:	2140      	movs	r1, #64	; 0x40
 8001e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e2e:	f7fe fcfb 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out6_Pin, 1);
 8001e32:	2201      	movs	r2, #1
 8001e34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3c:	f7fe fcf4 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(25);
 8001e40:	2019      	movs	r0, #25
 8001e42:	f7fe fb97 	bl	8000574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, out3_Pin, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2140      	movs	r1, #64	; 0x40
 8001e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e4e:	f7fe fceb 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out6_Pin, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5c:	f7fe fce4 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out4_Pin, 1);
 8001e60:	2201      	movs	r2, #1
 8001e62:	2180      	movs	r1, #128	; 0x80
 8001e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e68:	f7fe fcde 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, out5_Pin, 1);
 8001e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e70:	2201      	movs	r2, #1
 8001e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e76:	f7fe fcd7 	bl	8000828 <HAL_GPIO_WritePin>
  HAL_Delay(25);
 8001e7a:	2019      	movs	r0, #25

}
 8001e7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(25);
 8001e80:	f7fe bb78 	b.w	8000574 <HAL_Delay>

08001e84 <funcion_change>:

void (*fun_ptr)(void) = &f1_port;

 void funcion_change()
 {
   if(fun_ptr == &f1_port)
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <funcion_change+0x10>)
 8001e86:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <funcion_change+0x14>)
 8001e88:	6819      	ldr	r1, [r3, #0]
 8001e8a:	4291      	cmp	r1, r2
   {
     fun_ptr=&f2_port;
 8001e8c:	bf08      	it	eq
 8001e8e:	4a03      	ldreq	r2, [pc, #12]	; (8001e9c <funcion_change+0x18>)
   }
   else
   {
     fun_ptr=&f1_port;
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	4770      	bx	lr
 8001e94:	20000008 	.word	0x20000008
 8001e98:	08001bcd 	.word	0x08001bcd
 8001e9c:	08001d03 	.word	0x08001d03

08001ea0 <funcion_call>:
   }
 }

 void funcion_call()
 {
   fun_ptr();
 8001ea0:	4b01      	ldr	r3, [pc, #4]	; (8001ea8 <funcion_call+0x8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4718      	bx	r3
 8001ea6:	bf00      	nop
 8001ea8:	20000008 	.word	0x20000008

08001eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eac:	b530      	push	{r4, r5, lr}
 8001eae:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eb0:	2244      	movs	r2, #68	; 0x44
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	a805      	add	r0, sp, #20
 8001eb6:	f000 f92f 	bl	8002118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eba:	2214      	movs	r2, #20
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4668      	mov	r0, sp
 8001ec0:	f000 f92a 	bl	8002118 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec4:	2288      	movs	r2, #136	; 0x88
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	a816      	add	r0, sp, #88	; 0x58
 8001eca:	f000 f925 	bl	8002118 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ed4:	2310      	movs	r3, #16
 8001ed6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001edc:	230a      	movs	r3, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ede:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001ee0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ee2:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ee4:	2307      	movs	r3, #7
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee6:	2500      	movs	r5, #0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ee8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eea:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eec:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001eee:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ef0:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ef2:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef4:	f7fe fd78 	bl	80009e8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ef8:	220f      	movs	r2, #15
 8001efa:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001efc:	2104      	movs	r1, #4
 8001efe:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f00:	e88d 002c 	stmia.w	sp, {r2, r3, r5}
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f04:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f06:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f08:	f7fe ffd0 	bl	8000eac <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f0c:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f0e:	9416      	str	r4, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f10:	9525      	str	r5, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f12:	f7ff f991 	bl	8001238 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f16:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f1a:	f7fe fc9f 	bl	800085c <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8001f1e:	b039      	add	sp, #228	; 0xe4
 8001f20:	bd30      	pop	{r4, r5, pc}

08001f22 <main>:
{
 8001f22:	b508      	push	{r3, lr}
  HAL_Init();
 8001f24:	f7fe fafe 	bl	8000524 <HAL_Init>
  SystemClock_Config();
 8001f28:	f7ff ffc0 	bl	8001eac <SystemClock_Config>
  MX_GPIO_Init();
 8001f2c:	f7ff fde6 	bl	8001afc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001f30:	f000 f854 	bl	8001fdc <MX_USART2_UART_Init>
    funcion_call();
 8001f34:	f7ff ffb4 	bl	8001ea0 <funcion_call>
 8001f38:	e7fc      	b.n	8001f34 <main+0x12>

08001f3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f3a:	4770      	bx	lr

08001f3c <HAL_GPIO_EXTI_Callback>:
#include "my_it_callbacks.h"


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if(GPIO_Pin == in1_Pin)
 8001f3c:	2802      	cmp	r0, #2
 8001f3e:	d101      	bne.n	8001f44 <HAL_GPIO_EXTI_Callback+0x8>
  {
    funcion_change();
 8001f40:	f7ff bfa0 	b.w	8001e84 <funcion_change>
 8001f44:	4770      	bx	lr
	...

08001f48 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_MspInit+0x2c>)
 8001f4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	661a      	str	r2, [r3, #96]	; 0x60
 8001f52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001f54:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f56:	f002 0201 	and.w	r2, r2, #1
 8001f5a:	9200      	str	r2, [sp, #0]
 8001f5c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f64:	659a      	str	r2, [r3, #88]	; 0x58
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f70:	b002      	add	sp, #8
 8001f72:	4770      	bx	lr
 8001f74:	40021000 	.word	0x40021000

08001f78 <NMI_Handler>:
 8001f78:	4770      	bx	lr

08001f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7a:	e7fe      	b.n	8001f7a <HardFault_Handler>

08001f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f7c:	e7fe      	b.n	8001f7c <MemManage_Handler>

08001f7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7e:	e7fe      	b.n	8001f7e <BusFault_Handler>

08001f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f80:	e7fe      	b.n	8001f80 <UsageFault_Handler>

08001f82 <SVC_Handler>:
 8001f82:	4770      	bx	lr

08001f84 <DebugMon_Handler>:
 8001f84:	4770      	bx	lr

08001f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f86:	4770      	bx	lr

08001f88 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f88:	f7fe bae2 	b.w	8000550 <HAL_IncTick>

08001f8c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001f8c:	2002      	movs	r0, #2
 8001f8e:	f7fe bc51 	b.w	8000834 <HAL_GPIO_EXTI_IRQHandler>
	...

08001f94 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f94:	490f      	ldr	r1, [pc, #60]	; (8001fd4 <SystemInit+0x40>)
 8001f96:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001f9a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <SystemInit+0x44>)
 8001fa4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001fa6:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001fa8:	f042 0201 	orr.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8001fae:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001fb6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001fba:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001fbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fc0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fc8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001fca:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001fd0:	608b      	str	r3, [r1, #8]
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00
 8001fd8:	40021000 	.word	0x40021000

08001fdc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fdc:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8001fde:	480c      	ldr	r0, [pc, #48]	; (8002010 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <MX_USART2_UART_Init+0x38>)
 8001fe2:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001fe6:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fea:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fec:	2300      	movs	r3, #0
 8001fee:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ff0:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ff2:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ff4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ffa:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ffc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ffe:	f7ff fd4e 	bl	8001a9e <HAL_UART_Init>
 8002002:	b118      	cbz	r0, 800200c <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8002004:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002008:	f7ff bf97 	b.w	8001f3a <Error_Handler>
 800200c:	bd08      	pop	{r3, pc}
 800200e:	bf00      	nop
 8002010:	20000030 	.word	0x20000030
 8002014:	40004400 	.word	0x40004400

08002018 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002018:	b510      	push	{r4, lr}
 800201a:	4604      	mov	r4, r0
 800201c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201e:	2214      	movs	r2, #20
 8002020:	2100      	movs	r1, #0
 8002022:	a803      	add	r0, sp, #12
 8002024:	f000 f878 	bl	8002118 <memset>
  if(uartHandle->Instance==USART2)
 8002028:	6822      	ldr	r2, [r4, #0]
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_UART_MspInit+0x60>)
 800202c:	429a      	cmp	r2, r3
 800202e:	d120      	bne.n	8002072 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002030:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002034:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8002036:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002038:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800203c:	659a      	str	r2, [r3, #88]	; 0x58
 800203e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002040:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002044:	9201      	str	r2, [sp, #4]
 8002046:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002048:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	9302      	str	r3, [sp, #8]
 8002058:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800205a:	230c      	movs	r3, #12
 800205c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002062:	2303      	movs	r3, #3
 8002064:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800206a:	2307      	movs	r3, #7
 800206c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206e:	f7fe faff 	bl	8000670 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002072:	b008      	add	sp, #32
 8002074:	bd10      	pop	{r4, pc}
 8002076:	bf00      	nop
 8002078:	40004400 	.word	0x40004400

0800207c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800207c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002080:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002082:	e003      	b.n	800208c <LoopCopyDataInit>

08002084 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002086:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002088:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800208a:	3104      	adds	r1, #4

0800208c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800208c:	480b      	ldr	r0, [pc, #44]	; (80020bc <LoopForever+0xa>)
	ldr	r3, =_edata
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002090:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002092:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002094:	d3f6      	bcc.n	8002084 <CopyDataInit>
	ldr	r2, =_sbss
 8002096:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002098:	e002      	b.n	80020a0 <LoopFillZerobss>

0800209a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800209a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800209c:	f842 3b04 	str.w	r3, [r2], #4

080020a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <LoopForever+0x16>)
	cmp	r2, r3
 80020a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80020a4:	d3f9      	bcc.n	800209a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020a6:	f7ff ff75 	bl	8001f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020aa:	f000 f811 	bl	80020d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020ae:	f7ff ff38 	bl	8001f22 <main>

080020b2 <LoopForever>:

LoopForever:
    b LoopForever
 80020b2:	e7fe      	b.n	80020b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020b4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80020b8:	080021ac 	.word	0x080021ac
	ldr	r0, =_sdata
 80020bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80020c0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80020c4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80020c8:	200000b0 	.word	0x200000b0

080020cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020cc:	e7fe      	b.n	80020cc <ADC1_2_IRQHandler>
	...

080020d0 <__libc_init_array>:
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	4e0d      	ldr	r6, [pc, #52]	; (8002108 <__libc_init_array+0x38>)
 80020d4:	4c0d      	ldr	r4, [pc, #52]	; (800210c <__libc_init_array+0x3c>)
 80020d6:	1ba4      	subs	r4, r4, r6
 80020d8:	10a4      	asrs	r4, r4, #2
 80020da:	2500      	movs	r5, #0
 80020dc:	42a5      	cmp	r5, r4
 80020de:	d109      	bne.n	80020f4 <__libc_init_array+0x24>
 80020e0:	4e0b      	ldr	r6, [pc, #44]	; (8002110 <__libc_init_array+0x40>)
 80020e2:	4c0c      	ldr	r4, [pc, #48]	; (8002114 <__libc_init_array+0x44>)
 80020e4:	f000 f820 	bl	8002128 <_init>
 80020e8:	1ba4      	subs	r4, r4, r6
 80020ea:	10a4      	asrs	r4, r4, #2
 80020ec:	2500      	movs	r5, #0
 80020ee:	42a5      	cmp	r5, r4
 80020f0:	d105      	bne.n	80020fe <__libc_init_array+0x2e>
 80020f2:	bd70      	pop	{r4, r5, r6, pc}
 80020f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020f8:	4798      	blx	r3
 80020fa:	3501      	adds	r5, #1
 80020fc:	e7ee      	b.n	80020dc <__libc_init_array+0xc>
 80020fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002102:	4798      	blx	r3
 8002104:	3501      	adds	r5, #1
 8002106:	e7f2      	b.n	80020ee <__libc_init_array+0x1e>
 8002108:	080021a4 	.word	0x080021a4
 800210c:	080021a4 	.word	0x080021a4
 8002110:	080021a4 	.word	0x080021a4
 8002114:	080021a8 	.word	0x080021a8

08002118 <memset>:
 8002118:	4402      	add	r2, r0
 800211a:	4603      	mov	r3, r0
 800211c:	4293      	cmp	r3, r2
 800211e:	d100      	bne.n	8002122 <memset+0xa>
 8002120:	4770      	bx	lr
 8002122:	f803 1b01 	strb.w	r1, [r3], #1
 8002126:	e7f9      	b.n	800211c <memset+0x4>

08002128 <_init>:
 8002128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212a:	bf00      	nop
 800212c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212e:	bc08      	pop	{r3}
 8002130:	469e      	mov	lr, r3
 8002132:	4770      	bx	lr

08002134 <_fini>:
 8002134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002136:	bf00      	nop
 8002138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213a:	bc08      	pop	{r3}
 800213c:	469e      	mov	lr, r3
 800213e:	4770      	bx	lr
